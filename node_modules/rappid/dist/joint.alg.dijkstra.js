/*! Rappid v3.0.1 - HTML5 Diagramming Framework

Copyright (c) 2015 client IO

 2019-08-10 


This Source Code Form is subject to the terms of the Rappid License
, v. 2.0. If a copy of the Rappid License was not distributed with this
file, You can obtain one at http://jointjs.com/license/rappid_v2.txt
 or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/


this.joint = this.joint || {};
(function (exports, PriorityQueue_mjs) {
    'use strict';

    // Dijkstra's shortest path algorithm.

    var Dijkstra = function(adjacencyList, source, weight) {

        weight = weight || function(u, v) { return 1; };

        var dist = {};
        dist[source] = 0;

        var previous = {};
        var Q = new PriorityQueue_mjs.PriorityQueue;

        for (var v in adjacencyList) {

            if (v !== source) {
                dist[v] = Infinity;
            }
            Q.insert(dist[v], v, v);
        }

        var u, neighbours, i, alt;
        var scanned = {};
        while (!Q.isEmpty()) {
            u = Q.remove();
            scanned[u] = true;
            neighbours = adjacencyList[u] || [];
            for (i = 0; i < neighbours.length; i++) {
                v = neighbours[i];
                if (!scanned[v]) {
                    alt = dist[u] + weight(u, v);
                    if (alt < dist[v]) {
                        dist[v] = alt;
                        previous[v] = u;
                        Q.updatePriority(v, alt);
                    }
                }
            }
        }

        return previous;
    };

    exports.Dijkstra = Dijkstra;

}(this.joint.alg = this.joint.alg || {}, joint.alg));
