/*! Rappid v3.0.1 - HTML5 Diagramming Framework

Copyright (c) 2015 client IO

 2019-08-10 


This Source Code Form is subject to the terms of the Rappid License
, v. 2.0. If a copy of the Rappid License was not distributed with this
file, You can obtain one at http://jointjs.com/license/rappid_v2.txt
 or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/


this.joint = this.joint || {};
(function (exports, core_mjs) {
    'use strict';

    // joint.storage.Local stores graphs to the HTML 5 localStorage.

    var Local = {

        prefix: 'joint.storage',

        // Store a document `doc` to the `collection` in localStorage.
        // `callback` has the following signature: `callback(err, doc)` where
        // `doc` is the inserted document.
        insert: function(collection, doc, callback) {

            var id = doc.id || core_mjs.util.uuid();

            var index = this.loadIndex(collection);
            if (index.keys.indexOf(id) === -1) {
                index.keys.push(id);
            }

            this.setItem(this.docKey(collection, id), doc);
            this.setItem(this.indexKey(collection), index);

            // Don't add the `id` to the document if it wasn't there.
            this.callback(callback, null, core_mjs.util.assign({}, doc, { id: id }));
        },

        // Find a document in `collection`.
        // `query` can currently be either empty in which case all the
        // documents from the `collection` are returned or it can contain `id`
        // of a document in which case only a document with that `id` is returned.
        // `callback` signature is: `callback(err, docs)`.
        find: function(collection, query, callback) {

            var index = this.loadIndex(collection);
            var docs = [];

            if (core_mjs.util.isEmpty(query)) {

                // Find all documents in the collection.
                index.keys.forEach(function(id) {

                    var doc = this.getItem(this.docKey(collection, id));
                    if (!doc) {

                        this.callback(callback, new Error('Storage incosistency. No document found for an ID ' + id + ' from index.'));
                    }

                    docs.push(doc);

                }, this);

                this.callback(callback, null, docs);

            } else if (query.id) {

                var doc = this.getItem(this.docKey(collection, query.id));
                this.callback(callback, null, doc ? [doc] : []);

            } else {

                // Other queries supported yet.
                this.callback(callback, null, []);
            }
        },

        // Remove a document from the `collection`. `query` can currently be either empty
        // in which case all the documents from the `collection` are removed
        // or it can contain an `id` of the document to be removed.
        // `callback` signature is: `callback(err)`.
        remove: function(collection, query, callback) {

            var index = this.loadIndex(collection);

            if (core_mjs.util.isEmpty(query)) {

                index.keys.forEach(function(id) {

                    localStorage.removeItem(this.docKey(collection, id));

                }, this);

                localStorage.removeItem(this.indexKey(collection));
                this.callback(callback, null);

            } else if (query.id) {

                index.keys = index.keys.filter(function(key) {
                    return key !== query.id;
                });

                localStorage.removeItem(this.docKey(collection, query.id));
                this.setItem(this.indexKey(collection), index);
                this.callback(callback, null);
            }
        },

        // Private helpers.
        // ----------------

        callback: function(callback, err, ret) {

            if (callback) {

                setTimeout(function() {
                    callback(err, ret);
                }, 1);
            }
        },

        setItem: function(key, item) {

            localStorage.setItem(key, JSON.stringify(item));
        },

        getItem: function(key) {

            var item = localStorage.getItem(key);
            return item ? JSON.parse(item) : item;
        },

        loadIndex: function(collection) {

            var index = this.getItem(this.indexKey(collection)) || {};
            index.keys = index.keys || [];
            return index;
        },

        docKey: function(collection, id) {

            return this.prefix + '.' + collection + '.docs.' + id;
        },

        indexKey: function(collection) {

            return this.prefix + '.' + collection + '.index';
        }
    };

    exports.Local = Local;

}(this.joint.storage = this.joint.storage || {}, joint));
