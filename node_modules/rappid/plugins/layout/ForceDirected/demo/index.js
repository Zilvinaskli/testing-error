/*! Rappid v3.0.1 - HTML5 Diagramming Framework

Copyright (c) 2015 client IO

 2019-08-10 


This Source Code Form is subject to the terms of the Rappid License
, v. 2.0. If a copy of the Rappid License was not distributed with this
file, You can obtain one at http://jointjs.com/license/rappid_v2.txt
 or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/


var json = window.json;

var graph = new joint.dia.Graph;

// Create JointJS cell models out of miserables.js file.
// -----------------------------------------------------

var cells = [];
var colors = [ '#1ABC9C', '#2ECC71', '#3498DB', '#9B59B6', '#34495E', '#F1C40F', '#E67E22', '#E74C3C', '#BDC3C7', '#95A5A6', '#C0392B' ];
function group2fill(group) { return colors[group % (colors.length + 1)]; }

json.nodes.forEach(function(node) {

    cells.push({
        z: 1,
        id: node.name,
        type: 'standard.Ellipse',
        attrs: {
            label: { y: 12, text: node.name },
            body: { fill: group2fill(node.group) }
        },
        size: { width: 8, height: 8 },
        weight: 1
    });
});

json.links.forEach(function(link) {
    cells.push({
        z: 0,
        type: 'standard.Link',
        source: {
            id: json.nodes[link.source].name
        },
        target: {
            id: json.nodes[link.target].name
        },
        attrs: {
            line: {
                targetMarker: null,
                strokeWidth: Math.sqrt(link.value)
            }
        }
    });
});
// Create paper and populate the graph.
// ------------------------------------

var paper = new joint.dia.Paper({
    el: document.getElementById('paper'),
    width: 850,
    height: 650,
    gridSize: 1,
    model: graph,
    async: true,
    frozen: true,
    sorting: joint.dia.Paper.sorting.APPROX,
    defaultAnchor: { name: 'modelCenter' },
    defaultConnectionPoint: { name: 'anchor' }
});

graph.fromJSON({ cells: cells });

// Create and start a graph layout object with the graph as a model.
// -----------------------------------------------------------------

var forceLayout = new joint.layout.ForceDirected({
    graph: graph,
    x: 25,
    y: 25,
    width: 800,
    height: 600,
    gravityCenter: { x: 400, y: 300 },
    charge:  250,
    linkDistance: 10,
    linkStrength: 1
});

forceLayout.start();

var layoutFinished = false;
forceLayout.on('end', function() {
    layoutFinished = true;
});

function animate() {
    if (layoutFinished) return;
    joint.util.nextFrame(animate);
    forceLayout.step();
}

$('#animate').on('click', animate);

$('#step').on('click', function() {
    Array.from({ length: 100 }).forEach(function() {
        forceLayout.step();
    });
});

console.log('JointJS number of cells:', (json.links.length + json.nodes.length), '(links:', json.links.length, 'elements:', json.nodes.length + ')');

animate();
paper.unfreeze();
