/*! Rappid v3.0.1 - HTML5 Diagramming Framework

Copyright (c) 2015 client IO

 2019-08-10 


This Source Code Form is subject to the terms of the Rappid License
, v. 2.0. If a copy of the Rappid License was not distributed with this
file, You can obtain one at http://jointjs.com/license/rappid_v2.txt
 or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/



var SubgraphShape = joint.shapes.standard.BorderedImage;
var PreviewPadding = 10;

var graph = new joint.dia.Graph;
var paper = new joint.dia.Paper({
    el: document.getElementById('paper'),
    width: 500,
    height: 300,
    model: graph,
    linkPinning: false,
    defaultLink: function() {
        return new joint.shapes.standard.Link();
    }
});

var stencil = new joint.ui.Stencil({
    paper: paper,
    width: 200,
    height: 100,
    dropAnimation: { duration: 200, easing: 'swing' },
    layout: {
        columns: 2,
        rowHeight: 70,
        dx: 15,
        dy: 5,
    }
});

stencil.render().$el.appendTo('#stencil');

var selection = new joint.ui.Selection({
    paper: paper
});

this.selection.addHandle({
    name: 'add-to-stencil',
    position: 'ne',
    icon: 'handle.png'
});

paper.on('blank:pointerdown', selection.startSelecting);

paper.on('element:pointerup', function(elementView, evt) {
    if (evt.ctrlKey || evt.metaKey) {
        selection.collection.add(elementView.model);
    }
});

selection.on('selection-box:pointerdown', function(elementView, evt) {
    if (evt.ctrlKey || evt.metaKey) {
        selection.collection.remove(elementView.model);
    }
});

selection.on('action:add-to-stencil:pointerdown', function() {

    var selectedElements = this.collection.models;
    var subgraphJSON = graph.getSubgraph(selectedElements).map(function(model) {
        return model.toJSON();
    });
    this.collection.reset([]);

    paper.toPNG(function(dataURI) {
        addStencilShapeWithPreview(subgraphJSON, dataURI);
    }, {
        area: graph.getCellsBBox(selectedElements).inflate(PreviewPadding)
    });
});

graph.on('add', function(cell, _collection, opt) {
    if (opt.stencil && cell instanceof SubgraphShape) {
        var subgraph = cell.get('subgraph');
        var position =  cell.position();
        cell.remove();
        addSubgraphJSON(graph, subgraph, position.x, position.y);
    }
})

function addStencilShapeWithPreview(subgraphJSON, dataURI) {
    var shape = new SubgraphShape({
        subgraph: subgraphJSON,
        attrs: {
            image: {
                xlinkHref: dataURI
            }
        }
    });
    stencilShapes.push(shape);
    stencil.load(stencilShapes);
    stencil.getPaper().fitToContent({ padding: 10 });
}

function addSubgraphJSON(graph, cellsJSON, x, y) {
    var tmpGraph = new joint.dia.Graph();
    tmpGraph.fromJSON({ cells: cellsJSON }, { sort: false });
    var bbox = tmpGraph.getBBox();
    tmpGraph.translate(x - bbox.x, y - bbox.y);
    var clonesHash = tmpGraph.cloneCells(tmpGraph.getCells());
    var clonesArray = Object.keys(clonesHash).map(function(id) { return clonesHash[id] });
    graph.addCells(clonesArray);
}

var stencilShapes = [
    new joint.shapes.standard.Rectangle({
        attrs: {
            root: {
                magnet: false
            },
            body: {
                fill: 'lightblue'
            }
        },
        ports: {
            items: [{ group: 'out' }],
            groups: {
                out: {
                    markup: [{
                        tagName: 'circle',
                        selector: 'portBody'
                    }],
                    position: {
                        name: 'right'
                    },
                    attrs: {
                        portBody: {
                            r: 10,
                            magnet: 'active',
                            fill: 'white',
                            stroke: 'black'
                        }
                    }
                }
            }
        }
    }),
    new joint.shapes.standard.Ellipse({
        attrs: {
            root: {
                magnet: false
            },
            body: {
                fill: 'lightgray'
            }
        },
        ports: {
            items: [{ group: 'in' }],
            groups: {
                in: {
                    markup: [{
                        tagName: 'circle',
                        selector: 'portBody'
                    }],
                    position: {
                        name: 'left'
                    },
                    attrs: {
                        portBody: {
                            r: 10,
                            magnet: 'passive',
                            fill: 'white',
                            stroke: 'black'
                        }
                    }
                }
            }
        }
    })
];

stencil.load(stencilShapes);



