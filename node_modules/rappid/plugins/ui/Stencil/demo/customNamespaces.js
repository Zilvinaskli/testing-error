/*! Rappid v3.0.1 - HTML5 Diagramming Framework

Copyright (c) 2015 client IO

 2019-08-10 


This Source Code Form is subject to the terms of the Rappid License
, v. 2.0. If a copy of the Rappid License was not distributed with this
file, You can obtain one at http://jointjs.com/license/rappid_v2.txt
 or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/


joint.shapes.standard.Circle.define('custom.MyCircle', {
    attrs: {
        root: { magnet: false },
        body: { fill: 'lightgray' }
    },
    ports: {
        groups: {
            out: {
                markup: [{ tagName: 'circle', selector: 'portBody' }],
                position: { name: 'ellipse', args: { startAngle: 90, step: 35 }},
                attrs: { portBody: { r: 10, magnet: 'passive', fill: 'white', stroke: 'black' }}
            }
        }
    }
});

joint.shapes.standard.Rectangle.define('custom.MyRectangle', {
    attrs: {
        root: { magnet: false },
        body: { fill: 'lightblue' }
    },
    ports: {
        groups: {
            out: {
                markup: [{ tagName: 'circle', selector: 'portBody' }],
                position: { name: 'right' },
                attrs: { portBody: { r: 10, magnet: 'active', fill: 'white', stroke: 'black' }}
            }
        }
    }
});

// this view will be used for all elements in the Stencil
var StencilElementView = joint.dia.ElementView.extend({

    body: null,
    label: null,

    markup: function(tagName) {
        return [{
            tagName: tagName,
            selector: 'body',
            attributes: { fill: '#31d0c6' }
        }, {
            tagName: 'text',
            selector: 'label',
            attributes: { fill: 'white', y: 14, x: 6, 'font-family': 'monospace' }
        }]
    },

    _renderPorts: function() {
        // don't render ports at all in this view
    },

    render: function() {

        var modelMarkupTagName = _.find(this.model.markup, 'selector', 'body').tagName;

        var doc = joint.util.parseDOMJSON(this.markup(modelMarkupTagName));
        this.body = doc.selectors.body;
        this.label = doc.selectors.label;
        this.el.appendChild(doc.fragment);
        this.update();
    },

    update: function() {
        var size = this.model.get('size');
        var portsCount = this.model.getPorts().length + '';

        this.label.innerHTML = portsCount;

        this.body.setAttribute('data-tooltip', 'number of output ports: ' + portsCount);
        this.label.setAttribute('data-tooltip', 'number of output ports: ' + portsCount);

        this.body.setAttribute('width', size.width);
        this.body.setAttribute('height', size.height);
        this.body.setAttribute('r', size.width / 2);
        this.body.setAttribute('cx', size.width / 2);
        this.body.setAttribute('cy', size.width / 2);
        this.updateTransformation();
    }
});

// this view will be used when element is dragged from Stencil
var DraggedElementView = joint.dia.ElementView.extend({

    body: null,

    markup: function(tagName) {
        return [{
            tagName: tagName,
            selector: 'body',
            attributes: { 'fill': 'transparent', 'stroke': '#9D1B15', 'stroke-width': 2 }
        }]
    },

    _renderPorts: function() {
        // don't render ports at all in this view
    },

    render: function() {

        var modelMarkupTagName = _.find(this.model.markup, 'selector', 'body').tagName;

        var doc = joint.util.parseDOMJSON(this.markup(modelMarkupTagName));
        this.body = doc.selectors.body;
        this.el.appendChild(doc.fragment);
        this.update();
    },

    update: function() {

        var size = this.model.get('size');

        this.body.setAttribute('width', size.width);
        this.body.setAttribute('height', size.height);
        this.body.setAttribute('r', size.width / 2);
        this.body.setAttribute('cx', size.width / 2);
        this.body.setAttribute('cy', size.width / 2);
        this.updateTransformation();
    }
});

var graph = new joint.dia.Graph;
var paper = new joint.dia.Paper({
    el: document.getElementById('paper'),
    width: 500,
    height: 300,
    drawGrid: 'mesh',
    gridSize: 20,
    model: graph
});

var stencil = new joint.ui.Stencil({
    paper: paper,
    width: 32,
    height: 300,
    paperOptions: function() {
        return {
            // specify the view for elements in the Stencil
            elementView: StencilElementView,
            // define the Graph - this graph restricts the shapes to elements from the `joint.shapes.custom` only
            model: new joint.dia.Graph({}, { cellNamespace: joint.shapes.custom })
        }
    },
    paperDragOptions: {
        elementView: DraggedElementView
    },
    dragStartClone: function(cell) {
        return cell.clone().size(80, 80);
    },
    dropAnimation: { duration: 200, easing: 'swing' },
    layout: { columns: 1, columnWidth: 32, rowHeight: 28, dx: 0, dy: 4 }
});

stencil.render().$el.appendTo('#stencil');

var stencilShapes = [
    {
        type: 'MyCircle',
        ports: { items: [{ group: 'out' }] }
    },
    {
        type: 'MyCircle',
        ports: { items: [{ group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }] }
    },
    {
        type: 'MyCircle',
        ports: { items: [{ group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }] }
    },
    {
        type: 'MyRectangle',
        ports: {
            items: [{ group: 'out' }, { group: 'out' }]
        }
    },
    {
        type: 'MyRectangle',
        ports: {
            groups: { out: { attrs: { portBody: { r: 4 }}}},
            items: [{ group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }]
        }
    },
    {
        type: 'MyRectangle',
        ports: {
            groups: { out: { attrs: { portBody: { r: 3 }}}},
            items: [{ group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }, { group: 'out' }]
        }
    },
    // this won't work as the Stencil is restricted to the elements from the `joint.shapes.custom` namespace only
    // {
    //     type: 'standard.Rectangle'
    // }
];

stencil.load(stencilShapes);

new joint.ui.Tooltip({
    rootTarget: document.body,
    target: '[data-tooltip]',
    direction: 'auto',
    padding: 20
});
