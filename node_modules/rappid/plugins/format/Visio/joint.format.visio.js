/*! Rappid v3.0.1 - HTML5 Diagramming Framework

Copyright (c) 2015 client IO

 2019-08-10 


This Source Code Form is subject to the terms of the Rappid License
, v. 2.0. If a copy of the Rappid License was not distributed with this
file, You can obtain one at http://jointjs.com/license/rappid_v2.txt
 or from the Rappid archive as was distributed by client IO. See the LICENSE file.*/


/*
required dependencies:

"xml-js": "1.6.8"
"jszip": "3.1.5",
*/
joint.dia.Graph.prototype.fromVisio = function(strBase64, callback) {

    // type of shapes const
    var types = [
        { type: 'Rectangle', opt: { list: ['Rectangle', 'Square', 'Check 2'], path: null, width: 150, height: 150 }},
        { type: 'Rectangle', opt: { list: ['Rectangle'], path: null, width: 150, height: 100 }},
        { type: 'Rectangle', opt: { list: ['Process'], path: null, width: 100, height: 75 }},
        { type: 'Start/End', opt: { list: ['Start/End'], path: 'M 862.94 887 L 926.06 887 C 936.52 887 945 878.49 945 868 C 945 857.51 936.52 849 926.06 849 L 862.94 849 C 852.48 849 844 857.51 844 868 C 844 878.49 852.48 887 862.94 887', width: 150, height: 150 }},
        { type: '1-D double', opt: { list: ['1-D double', '2-D double'], path: 'M 724 627 L 724 607 L 704 647 L 724 687 L 724 667 L 804 667 L 804 687 L 824 647 L 804 607 L 804 627 L 724 627', width: 150, height: 150 }},
        { type: '1-D single', opt: { list: ['1-D single', '2-D single'], path: 'M 709 758 L 809 758 L 809 778 L 829 738 L 809 698 L 809 718 L 709 718', width: 150, height: 150 }},
        { type: 'Arrow box', opt: { list: ['Arrow box'], path: 'M 959 723 L 959 743 L 939 743 L 979 763 L 1019 743 L 999 743 L 999 723 L 1059 723 L 1059 603 L 899 603 L 899 723 L 959 723', width: 150, height: 150 }},
        { type: 'Pentagon', opt: { list: ['Pentagon'], path: 'M 1468 787 L 1388.09 845.06 L 1418.62 939 L 1517.38 939 L 1547.91 845.06 L 1468 787', width: 150, height: 150 }},
        { type: 'Parallelogram', opt: { list: ['Parallelogram'], path: 'M 1286 1269 L 1422.8 1269 L 1438 1168 L 1301.2 1168 L 1286 1269', width: 150, height: 100 }},
        { type: 'Trapezoid', opt: { list: ['Trapezoid'], path: 'M 1163 837 L 1315 837 L 1299.8 736 L 1178.2 736 L 1163 837', width: 150, height: 100 }},
        { type: 'Cross', opt: { list: ['Cross'], path: 'M 1378 798.66 L 1441.34 798.66 L 1441.34 862 L 1466.66 862 L 1466.66 798.66 L 1530 798.66 L 1530 773.34 L 1466.66 773.34 L 1466.66 710 L 1441.34 710 L 1441.34 773.34 L 1378 773.34 L 1378 798.66', width: 150, height: 100 }},
        { type: 'Chevron', opt: { list: ['Chevron'], path: 'M 921 990 L 984.5 990 L 1048 926.5 L 984.5 863 L 921 863 L 984.5 926.5 L 921 990', width: 150, height: 100 }},
        { type: 'Right Triangle', opt: { list: ['Right Triangle'], path: 'M 921 837 L 1073 837 L 921 736 L 921 837', width: 150, height: 100 }},
        { type: 'Hexagon', opt: { list: ['Hexagon'], path: 'M 1104.88 964 L 1017.12 964 L 973.24 1040 L 1017.12 1116 L 1104.88 1116 L 1148.76 1040 L 1104.88 964', width: 150, height: 150 }},
        { type: 'Heptagon', opt: { list: ['Heptagon'], path: 'M 1295.69 1116 L 1338.96 1061.75 L 1323.52 994.11 L 1261 964 L 1198.48 994.11 L 1183.04 1061.75 L 1226.31 1116 L 1295.69 1116', width: 150, height: 150 }},
        { type: 'Decagon', opt: { list: ['Decagon'], path: 'M 1544 1053.5 L 1531.87 1092.74 L 1500.12 1117 L 1460.88 1117 L 1429.13 1092.74 L 1417 1053.5 L 1429.13 1014.26 L 1460.88 990 L 1500.12 990 L 1531.87 1014.26 L 1544 1053.5', width: 125, height: 125 }},
        { type: 'Triangle', opt: { list: ['Triangle'], path: 'M 136.1 115.7 L 128.5 102.5 L 120.9 115.7 L 136.1 115.7', width: 150, height: 130 }},
        { type: 'Diamond', opt: { list: ['Decision'], path: '0,37.5 50,75 100,37.5 50,0, 0,37.5', width: 100, height: 75 }},
        { type: 'Diamond', opt: { list: ['Diamond'], path: '0,37.5 50,75 100,37.5 50,0, 0,37.5', width: 150, height: 100 }},
        { type: 'Document', opt: { list: ['Document'], path: 'M 120.4 108.256 L 120.4 101.5 L 130.5 101.5 L 130.5 108.256 C 129.004 107.13 126.946 107.13 125.45 108.256 C 123.954 109.381 121.896 109.381 120.4 108.256', width: 100, height: 75 }},
        { type: 'Database', opt: { list: ['Database', 'Can'], path: '<g transform="translate(0,0)" style="visibility: visible; cursor: move;"><path d="M 1010.47 1002 L 1102 1002 C 1114.62 1025.75 1114.62 1054.25 1102 1078 L 1010.47 1078 C 997.78 1054.27 997.78 1025.73 1010.47 1002"></path><path d="M 1102 1002 C 1089.38 1025.75 1089.38 1054.25 1102 1078" fill="none" stroke="white" stroke-miterlimit="10" pointer-events="stroke" visibility="hidden" stroke-width="9"></path><path d="M 1102 1002 C 1089.38 1025.75 1089.38 1054.25 1102 1078" fill="none" stroke="#000000" stroke-miterlimit="10"></path></g>', width: 100, height: 75 }},
        { type: 'Ellipse', opt: { list: ['Circle', 'Ellipse', 'Main topic'], path: null, width: 150, height: 150 }},
        { type: 'Ellipse', opt: { list: ['Main topic'], path: null, width: 200, height: 100 }},
        { type: 'Octagon', opt: { list: ['Octagon'], path: 'M 106.248 101.5 L 99.952 101.5 L 95.5 105.952 L 95.5 112.248 L 99.952 116.7 L 106.248 116.7 L 110.7 112.248 L 110.7 105.952 L 106.248 101.5', width: 150, height: 150 }},
        { type: 'Star', opt: { list: ['Star'], path: 'M 1224 702.33 C 1226.54 702.39 1229.09 702.39 1231.63 702.33 L 1234 695 L 1236.37 702.33 L 1244 702.33 C 1242.02 703.8 1240.07 705.3 1238.15 706.84 L 1240.81 715 L 1234 710.11 L 1227.19 715 L 1230.09 706.78 L 1224 702.33', width: 20, height: 20 }},
        { type: 'Flags', opt: { list: ['Flags'], path: '<g style="visibility: visible;"><path d="M 1133.61 863.11 L 1133.61 884.43" fill="none" stroke="#808080" stroke-width="2" stroke-miterlimit="10"></path></g><g transform="translate(0.5,0.5)" style="visibility: visible;"><path d="M 1135.5 873.5 L 1135.5 862.8 L 1146.5 868.15 L 1135.5 873.5" fill="#ff931e" stroke="none"></path></g>', width: 20, height: 25 }},
        { type: 'Done', opt: { list: ['Done'], path: '<g transform="translate(0.5,0.5)" style="visibility: visible;"><rect x="742" y="603" width="20" height="20" fill="none" stroke="white" pointer-events="stroke" visibility="hidden" stroke-width="9"></rect><rect x="742" y="603" width="20" height="20" fill="none" stroke="none" pointer-events="all"></rect></g><g transform="translate(0.5,0.5)" style="visibility: visible;"><path d="M 742 622 L 758 622 L 758 604 L 742 604 L 742 622" fill="#000080" stroke="none" pointer-events="all"></path></g><g transform="translate(0.5,0.5)" style="visibility: visible;"><path d="M 744 619 L 756 619 L 756 607 L 744 607 L 744 619" fill="#ffffff" stroke="none" pointer-events="all"></path></g><g transform="translate(0.5,0.5)" style="visibility: visible;"><path d="M 745 614.65 C 746.59 616.41 748.79 617.91 751.4 619 C 752.66 612.83 755.22 606.77 759 601 C 753.32 605.18 750.06 610.55 749.82 616.08 C 748.28 615.5 746.67 615.02 745 614.65" fill="url(https://www.draw.io/#mx-gradient-00ccff-1-000080-1-s-0)" stroke="#000080" stroke-miterlimit="10" transform="rotate(11,752,610)" pointer-events="all"></path></g><g transform="translate(0.5,0.5)" style="visibility: visible;"><path d="M 745 615.65 C 746.59 617.41 748.79 618.91 751.4 620 C 752.66 613.83 755.22 607.77 759 602 C 753.32 606.18 750.06 611.55 749.82 617.08 C 748.28 616.5 746.67 616.02 745 615.65" fill-opacity="0.2" fill="url(https://www.draw.io/#mx-gradient-0099cc-1-000066-1-s-0)" stroke="none" transform="rotate(11,752,611)" pointer-events="all"></path></g>', width: 50, height: 50 }},
        { type: '4-Point Star', opt: { list: ['4-Point Star'], path: 'M 984.5 723 L 1003.55 767.45 L 1048 786.5 L 1003.55 805.55 L 984.5 850 L 965.45 805.55 L 921 786.5 L 965.45 767.45 L 984.5 723', width: 150, height: 150 }},
        { type: '5-Point Star', opt: { list: ['5-Point Star'], path: 'M 1298.5 748 L 1312.34 792.45 L 1358.89 791.88 L 1320.89 818.78 L 1335.83 862.87 L 1298.5 835.05 L 1261.17 862.87 L 1276.11 818.78 L 1238.11 791.88 L 1284.66 792.45 L 1298.5 748', width: 150, height: 150 }},
        { type: '6-Point Star', opt: { list: ['6-Point Star'], path: 'M 1053.5 901 L 1064.5 945.45 L 1108.49 932.75 L 1075.5 964.5 L 1108.49 996.25 L 1064.5 983.55 L 1053.5 1028 L 1042.5 983.55 L 998.51 996.25 L 1031.5 964.5 L 998.51 932.75 L 1042.5 945.45 L 1053.5 901', width: 150, height: 150 }},
        { type: '7-Point Star', opt: { list: ['7-Point Star'], path: 'M 1424.5 947 L 1433.67 991.45 L 1474.14 970.91 L 1445.11 1005.8 L 1486.41 1024.64 L 1441.04 1023.68 L 1452.05 1067.71 L 1424.5 1031.65 L 1396.95 1067.71 L 1407.96 1023.68 L 1362.59 1024.64 L 1403.89 1005.8 L 1374.86 970.91 L 1415.33 991.45 L 1424.5 947', width: 150, height: 150 }},
        { type: '16-Point Star', opt: { list: ['16-Point Star'], path: 'M 984.5 1117 L 994.61 1129.7 L 1008.8 1121.84 L 1013.28 1137.43 L 1029.41 1135.59 L 1027.57 1151.72 L 1043.16 1156.2 L 1035.3 1170.39 L 1048 1180.5 L 1035.3 1190.61 L 1043.16 1204.8 L 1027.57 1209.28 L 1029.41 1225.41 L 1013.28 1223.57 L 1008.8 1239.16 L 994.61 1231.3 L 984.5 1244 L 974.39 1231.3 L 960.2 1239.16 L 955.72 1223.57 L 939.59 1225.41 L 941.43 1209.28 L 925.84 1204.8 L 933.7 1190.61 L 921 1180.5 L 933.7 1170.39 L 925.84 1156.2 L 941.43 1151.72 L 939.59 1135.59 L 955.72 1137.43 L 960.2 1121.84 L 974.39 1129.7 L 984.5 1117', width: 150, height: 150 }},
        { type: '24-Point Star', opt: { list: ['24-Point Star'], path: 'M 1233.5 1100 L 1240.19 1112.7 L 1249.93 1102.16 L 1253.11 1116.17 L 1265.25 1108.51 L 1264.69 1122.85 L 1278.41 1118.59 L 1274.15 1132.31 L 1288.49 1131.75 L 1280.83 1143.89 L 1294.84 1147.07 L 1284.3 1156.81 L 1297 1163.5 L 1284.3 1170.19 L 1294.84 1179.93 L 1280.83 1183.11 L 1288.49 1195.25 L 1274.15 1194.69 L 1278.41 1208.41 L 1264.69 1204.15 L 1265.25 1218.49 L 1253.11 1210.83 L 1249.93 1224.84 L 1240.19 1214.3 L 1233.5 1227 L 1226.81 1214.3 L 1217.07 1224.84 L 1213.89 1210.83 L 1201.75 1218.49 L 1202.31 1204.15 L 1188.59 1208.41 L 1192.85 1194.69 L 1178.51 1195.25 L 1186.17 1183.11 L 1172.16 1179.93 L 1182.7 1170.19 L 1170 1163.5 L 1182.7 1156.81 L 1172.16 1147.07 L 1186.17 1143.89 L 1178.51 1131.75 L 1192.85 1132.31 L 1188.59 1118.59 L 1202.31 1122.85 L 1201.75 1108.51 L 1213.89 1116.17 L 1217.07 1102.16 L 1226.81 1112.7 L 1233.5 1100', width: 150, height: 150 }},
        { type: '32-Point Star', opt: { list: ['32-Point Star'], path: 'M 1466.5 1121 L 1471.5 1133.7 L 1478.88 1122.22 L 1481.32 1135.66 L 1490.8 1125.84 L 1490.57 1139.48 L 1501.78 1131.71 L 1498.88 1145.04 L 1511.41 1139.59 L 1505.96 1152.12 L 1519.29 1149.22 L 1511.52 1160.43 L 1525.16 1160.2 L 1515.34 1169.68 L 1528.78 1172.12 L 1517.3 1179.5 L 1530 1184.5 L 1517.3 1189.5 L 1528.78 1196.88 L 1515.34 1199.32 L 1525.16 1208.8 L 1511.52 1208.57 L 1519.29 1219.78 L 1505.96 1216.88 L 1511.41 1229.41 L 1498.88 1223.96 L 1501.78 1237.29 L 1490.57 1229.52 L 1490.8 1243.16 L 1481.32 1233.34 L 1478.88 1246.78 L 1471.5 1235.3 L 1466.5 1248 L 1461.5 1235.3 L 1454.12 1246.78 L 1451.68 1233.34 L 1442.2 1243.16 L 1442.43 1229.52 L 1431.22 1237.29 L 1434.12 1223.96 L 1421.59 1229.41 L 1427.04 1216.88 L 1413.71 1219.78 L 1421.48 1208.57 L 1407.84 1208.8 L 1417.66 1199.32 L 1404.22 1196.88 L 1415.7 1189.5 L 1403 1184.5 L 1415.7 1179.5 L 1404.22 1172.12 L 1417.66 1169.68 L 1407.84 1160.2 L 1421.48 1160.43 L 1413.71 1149.22 L 1427.04 1152.12 L 1421.59 1139.59 L 1434.12 1145.04 L 1431.22 1131.71 L 1442.43 1139.48 L 1442.2 1125.84 L 1451.68 1135.66 L 1454.12 1122.22 L 1461.5 1133.7 L 1466.5 1121', width: 150, height: 150 }},
        { type: 'Rounded Rectangle', opt: { list: ['Rounded Rectangle', 'Round Corner Rectangle'], path: 'M 945.2 811 L 1066.8 811 L 1066.8 811 C 1070.86 811.1 1074.79 809.54 1077.66 806.67 C 1080.53 803.81 1082.1 799.9 1082 795.85 L 1082 725.15 C 1082.15 721.09 1080.6 717.15 1077.72 714.27 C 1074.83 711.4 1070.88 709.85 1066.8 710 L 1066.8 710 L 945.2 710 L 945.2 710 C 941.15 709.95 937.25 711.53 934.39 714.38 C 931.53 717.23 929.94 721.12 930 725.15 L 930 795.85 C 930.17 804.15 936.88 810.84 945.2 811 L 945.2 811', width: 150, height: 100 }},
        { type: 'Single Snip Corner Rectangle', opt: { list: ['Single Snip Corner Rectangle'], path: 'M 1154 811 L 1306 811 L 1306 811 L 1306 725.15 L 1290.8 710 L 1154 710 L 1154 710 L 1154 811 L 1154 811', width: 150, height: 100 }},
        { type: 'Snip Same Side Corner Rectangle', opt: { list: ['Snip Same Side Corner Rectangle'], path: 'M 1378 811 L 1530 811 L 1530 811 L 1530 725.15 L 1514.8 710 L 1393.2 710 L 1378 725.15 L 1378 811 L 1378 811', width: 150, height: 100 }},
        { type: 'Snip Diagonal Corner Rectangle', opt: { list: ['Snip Diagonal Corner Rectangle'], path: 'M 1596.2 811 L 1733 811 L 1733 811 L 1733 725.15 L 1717.8 710 L 1581 710 L 1581 710 L 1581 795.85 L 1596.2 811', width: 150, height: 100 }},
        { type: 'Single Round Corner Rectangle', opt: { list: ['Single Round Corner Rectangle'], path: 'M 930 951 L 1082 951 L 1082 951 L 1082 865.15 C 1082.15 861.09 1080.6 857.15 1077.72 854.27 C 1074.83 851.4 1070.88 849.85 1066.8 850 L 1066.8 850 L 930 850 L 930 850 L 930 951 L 930 951', width: 150, height: 100 }},
        { type: 'Round Same Side Corner Rectangle', opt: { list: ['Round Same Side Corner Rectangle'], path: 'M 1154 951 L 1306 951 L 1306 951 L 1306 865.15 C 1306.15 861.09 1304.6 857.15 1301.72 854.27 C 1298.83 851.4 1294.88 849.85 1290.8 850 L 1290.8 850 L 1169.2 850 L 1169.2 850 C 1165.15 849.95 1161.25 851.53 1158.39 854.38 C 1155.53 857.23 1153.94 861.12 1154 865.15 L 1154 951 L 1154 951', width: 150, height: 100 }},
        { type: 'Round Diagonal Corner Rectangle', opt: { list: ['Round Diagonal Corner Rectangle'], path: 'M 1378 951 L 1514.8 951 L 1514.8 951 C 1518.86 951.1 1522.79 949.54 1525.66 946.67 C 1528.53 943.81 1530.1 939.9 1530 935.85 L 1530 850 L 1530 850 L 1393.2 850 L 1393.2 850 C 1389.15 849.95 1385.25 851.53 1382.39 854.38 C 1379.53 857.23 1377.94 861.12 1378 865.15 L 1378 951 L 1378 951', width: 150, height: 100 }},
        { type: 'Snip and Round Single Corner Rectangle', opt: { list: ['Snip and Round Single Corner Rectangle'], path: 'M 1581 951 L 1733 951 L 1733 951 L 1733 865.15 L 1717.8 850 L 1596.2 850 L 1596.2 850 C 1592.15 849.95 1588.25 851.53 1585.39 854.38 C 1582.53 857.23 1580.94 861.12 1581 865.15 L 1581 951 L 1581 951', width: 150, height: 100 }},
        { type: 'Snip Corner Rectangle', opt: { list: ['Snip Corner Rectangle'], path: 'M 945.2 1091 L 1066.8 1091 L 1082 1075.85 L 1082 1005.15 L 1066.8 990 L 945.2 990 L 930 1005.15 L 930 1075.85 L 945.2 1091', width: 150, height: 100 }},
        { type: 'Snip and Round Corner Rectangle', opt: { list: ['Snip and Round Corner Rectangle'], path: 'M 1393.2 1091 L 1514.8 1091 L 1514.8 1091 C 1518.86 1091.1 1522.79 1089.54 1525.66 1086.67 C 1528.53 1083.81 1530.1 1079.9 1530 1075.85 L 1530 1005.15 L 1514.8 990 L 1393.2 990 L 1393.2 990 C 1389.15 989.95 1385.25 991.53 1382.39 994.38 C 1379.53 997.23 1377.94 1001.12 1378 1005.15 L 1378 1075.85 L 1393.2 1091', width: 150, height: 100 }},
        { type: 'Custom 2', opt: { list: ['Custom 2'], path: 'M 1077.25 868 L 1127.75 868 L 1153 792 L 1052 792 L 1077.25 868', width: 100, height: 75 }}
    ];

    var themes = [
        { name: 'Ion',
            def: {
                gradients: [
                    { shapes: ['Desicion', 'Start/End'], fill: '#b01513' },
                    { shapes: ['Process', 'Rectangle', 'Square', 'Circle', 'Ellipse', 'Custom 1', 'Custom 2', 'Custom 3', 'Custom 4', 'Hexagon'],
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#2c777d' },
                                { offset: '100%', color: '#1d4c4f' },
                            ],
                            type: 'linearGradient' }
                    },
                    { shapes: ['Document', 'Subprocess'],
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#1f5154' },
                                { offset: '100%', color: '#173f42' },
                            ],
                            type: 'linearGradient' }
                    }
                ]
            },
            styles: {
                shapes: [
                    {
                        line: 1,
                        col: 100,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#2c777d' },
                                { offset: '100%', color: '#1d4c4f' },
                            ],
                            type: 'linearGradient'
                        }
                    },
                    {
                        line: 1,
                        col: 101,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#2c777d' },
                                { offset: '100%', color: '#1d4c4f' },
                            ],
                            type: 'linearGradient'
                        }
                    },
                    {
                        line: 1,
                        col: 102,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#e83936' },
                                { offset: '100%', color: '#a41513' },
                            ],
                            type: 'linearGradient'
                        }
                    },
                    {
                        line: 1,
                        col: 103,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#469784' },
                                { offset: '100%', color: '#2d6054' },
                            ],
                            type: 'linearGradient'
                        }
                    },
                    {
                        line: 1,
                        col: 104,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#f4aa7e' },
                                { offset: '100%', color: '#da5e13' },
                            ],
                            type: 'linearGradient'
                        }
                    },
                    {
                        line: 1,
                        col: 105,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#f3dd9b' },
                                { offset: '100%', color: '#e2b11d' },
                            ],
                            type: 'linearGradient'
                        }
                    },
                    {
                        line: 1,
                        col: 106,
                        fill: {
                            attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' },
                            stops: [
                                { offset: '0%', color: '#cba8c9' },
                                { offset: '100%', color: '#945991' },
                            ],
                            type: 'linearGradient'
                        }
                    }
                ]
            }
        }
    ];

    var jsZip = new JSZip();
    var result = {
        paperOpt: {
            width: 1200,
            height: 1200
        },
        shapes: [],
        connectors: [],
        masterContents: [],
        images: [],
        legends: []
    };

    convertToXml(strBase64);

    function convertToXml(str) {
        jsZip.loadAsync(str, { base64: true } )
            .then(function(res)
            {
                getPaperContent(res);
            }, function(e) {
                if (onerror != null)
                {
                    onerror(e);
                }
            });
    }

    function getPaperContent(xml) {
        getRels(xml);
        getDocumentStyles(xml);
        getMasters(xml, function() {
            getDiagrams(xml);
        });
        getPaperOpt(xml);
        getImages(xml);
    }

    function getPaperOpt(xml) {
        xml.forEach(function(relativePath, entry) {
            entry.async('string').then(function(str) {
                // console.log(relativePath, JSON.parse(xml2json(str, { compact: false, spaces: 4 })));
            });
            if (relativePath === 'visio/pages/pages.xml') {
                entry.async('string').then(function(str) {
                    var paperOpt = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    result.paperOpt.width = +(getAttribute(paperOpt, 'N', 'PageWidth')[0].V)*100;
                    result.paperOpt.height = +(getAttribute(paperOpt, 'N', 'PageHeight')[0].V)*100;
                });
            }
        });
    }

    function getDiagrams(xml) {
        xml.forEach(function(relativePath, entry) {
            if (relativePath === 'visio/pages/page1.xml') {
                entry.async('string').then(function(str) {
                    var page = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    var pageContent = getAttribute(page.elements, 'name', 'PageContents')[0];
                    result.pageElements = page.elements[0].elements[0].elements;
                    var shapes = getAttribute(pageContent, 'name', 'Shapes')[0] || { elements: [] };
                    result.connects = getAttribute(pageContent, 'name', 'Connects')[0] || { elements: [] };
                    getShapesOptNew(shapes.elements);
                });
            }
        });
    }

    function getMasters(xml, callbackMasters) {
        xml.forEach(function(relativePath, entry) {
            if (relativePath === 'visio/masters/masters.xml') {
                entry.async('string').then(function(str) {
                    var masters = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    result.masters = (masters && masters.elements[0].elements) ? masters.elements[0].elements : {};
                    callbackMasters();
                });
            } else if (relativePath !== 'visio/masters/masters.xml' && relativePath.indexOf('visio/masters/master') !== -1) {
                entry.async('string').then(function(str) {
                    var masterContent = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    var masterElements = { filePath: relativePath, elements: getAttribute(masterContent, 'name', 'Shape')[0] };
                    result.masterContents.push(masterElements);
                });
            }
        });
    }

    function getDocumentStyles(xml) {
        xml.forEach(function(relativePath, entry) {
            if (relativePath === 'visio/document.xml') {
                entry.async('string').then(function(str) {
                    var styles = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    result.styles = styles.elements[0].elements;
                });
            } else if (relativePath === 'visio/theme/theme1.xml') {
                entry.async('string').then(function(str) {
                    var theme = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    var defColor = getAttribute(theme, 'name', 'vt:varColor1')[0].elements[0].attributes.val;
                    result.paperOpt.defColor = defColor ? '#' + defColor : '';
                    result.theme = theme.elements[0].elements;
                    result.theme.name = theme.elements[0].attributes.name;
                });
            } else if (relativePath === 'visio/validation.xml') {
                entry.async('string').then(function(str) {
                    var rules = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    result.rules = rules.elements || {};
                });
            }
        });
    }

    function getImages(xml) {
        xml.forEach(function(relativePath, entry) {
            if (relativePath.indexOf('.jpeg') !== -1) {
                entry.async('base64').then(function(base64Str) {
                    var path = relativePath.split('/');
                    result.images.push({ path: path[path.length - 1], str: 'data:image/jpeg;base64,' + base64Str });
                    callback.call(this, result);
                });
            } else if (relativePath.indexOf('.png') !== -1) {
                entry.async('base64').then(function(base64Str) {
                    var path = relativePath.split('/');
                    result.images.push({ path: path[path.length - 1], str: 'data:image/png;base64,' + base64Str });
                    callback.call(this, result);
                });
            }
        });
    }

    function getRels(xml) {
        xml.forEach(function(relativePath, entry) {
            if (relativePath === 'visio/pages/_rels/page1.xml.rels') {
                entry.async('string').then(function(str) {
                    var rels = JSON.parse(xml2json(str, { compact: false, spaces: 4 }));
                    result.rels = rels.elements[0].elements;
                });
            }
        });
    }

    function getShapeOptByType(shapeType) {
        var res = null;
        types.forEach(function(type) {
            if (type.opt.list.indexOf(shapeType) !== -1) {
                res = type;
            }
        });
        return res || { type: 'Rectangle', opt: { list: ['Process', 'Rectangle', 'Square'], path: null, width: 150, height: 150 }};
    }

    function getGradient(type, fill, gradArray) {
        var res = null;
        gradArray.forEach(function(grad) {
            if (grad.shapes.indexOf(type) !== -1) {
                res = grad.fill;
            }
        });
        return res || fill;
    }

    function getDefaultStyles(shape) {
        var fill = null;
        if (result.theme) {
            var themeName = result.theme.name;
            if (shape.opt.type !== 'Connector' && shape.opt.type !== 'Image' && shape.orType && (shape.cell.fill && !shape.cell.fill.type && shape.cell.fillFunc === 'Inh')) {
                if (getAttribute(themes, 'name', themeName)[0]) {
                    if (shape.cell.quickStyleFillColor && shape.cell.quickStyleLineMatrix) {
                        getAttribute(themes, 'name', themeName)[0].styles.shapes.forEach(function(style) {
                            if (style.line === shape.cell.quickStyleLineMatrix && style.col === shape.cell.quickStyleFillColor) {
                                fill = style.fill;
                            }
                        });
                    } else {
                        var gradients = getAttribute(themes, 'name', themeName)[0].def.gradients;
                        fill = getGradient(shape.orType, shape.cell.fill, gradients);
                    }
                }
            }
        }
        return fill;
    }

    function getGeometry(filePath, item) {
        var res = [];
        if (filePath) {
            result.masterContents.forEach(function(master) {
                if (master.filePath === filePath) {
                    var sections = getAttribute(master.elements.elements, 'name', 'Section') || [];
                    sections.forEach(function(s) {
                        if (s.attributes.N && s.attributes.N === 'Geometry') {
                            res.push({ attributes: s.attributes, elements: s.elements });
                        }
                    });
                }
            });
        } else {
            var sections = getAttribute(item, 'name', 'Section') || [];
            sections.forEach(function(s) {
                if (s.attributes.N && s.attributes.N === 'Geometry') {
                    res.push({ attributes: s.attributes, elements: s.elements });
                }
            });
        }
        return res;
    }

    /*function getScratch(filePath) {
        var res = [];
        result.masterContents.forEach(function(master) {
            if (master.filePath === filePath) {
                var sections = getAttribute(master.elements.elements, 'name', 'Section') || [];
                sections.forEach(function(s) {
                    if (s.attributes.N && s.attributes.N === 'Connection') {
                        res.push({ attributes: s.attributes, elements: s.elements });
                    }
                });
            }
        });
        return res;
    }*/

    /*function getMasterContent(filePath) {
        var res = [];
        result.masterContents.forEach(function(master) {
            if (master.filePath === filePath) {
                res = master.elements.elements;
            }
        });
        return res;
    }*/

    function getMasterById(id) {
        var masterContent;
        var master = result.masters.filter(function(m) {
            return m.attributes.ID === id;
        });
        if (master.length > 0) {
            var masterContId = getAttribute(master[0], 'name', 'Rel')[0].attributes['r:id'].match(/\d+/)[0];
            var filePath = 'visio/masters/master' + masterContId + '.xml';
            masterContent = result.masterContents.filter(function(mC) {
                return mC.filePath === filePath;
            });
        }
        masterContent[0].name = master[0].attributes.NameU;
        return masterContent[0];
    }

    function getChildShape(item, masterContent, onlyChild) {
        var elements = getAllPropertiesForShape(item.elements, masterContent.elements.elements, masterContent.name);
        var childShapes = [];
        var shape = getShapeCellAttr(elements, '1');
        shape.attributes = item.attributes;
        var locShapes = getAttribute(elements, 'name', 'Shapes');
        locShapes = locShapes.length > 0 ? locShapes[0] : [];
        if (locShapes.elements.length > 0) {
            locShapes.elements.forEach(function(s) {
                var locShape = getShapeCellAttr(s.elements, '1');
                locShape.attributes = s.attributes;
                locShape.cell.x = shape.cell.x;
                locShape.cell.y = shape.cell.y;
                childShapes.push(locShape);
            });
        }
        var res = onlyChild ? { childShapes: childShapes } : { shape: shape, childShapes: childShapes };
        return res;
    }

    function getAllPropertiesForShape(shapeContent, masterContent, type) {
        var res = [];
        var shapeEl = [];
        masterContent.forEach(function(element) {
            if (element.name === 'Cell') {
                shapeEl = shapeContent.filter(function(e) {
                    return e.attributes && e.attributes.N === element.attributes.N;
                });
                element = shapeEl.length > 0 ? shapeEl[0] : element;
                res.push(element);
            } else if (element.name === 'Text') {
                shapeEl = shapeContent.filter(function(e) {
                    return e.name === 'Text';
                });
                element = shapeEl.length > 0 ? shapeEl[0] : element;
                res.push(element);
            } else if (element.name === 'Shapes') {
                var childShapes = shapeContent.filter(function(e) {
                    return e.name === 'Shapes';
                });
                var chSh = [];
                var hasText;
                element.elements.forEach(function(elem, index) {
                    var childEl = [];
                    var childRes = { attributes: elem.attributes, elements: [] };
                    var shapeChildContent = (type !== 'Swimlane') ? childShapes[0].elements[index] : childShapes[0].elements[1];
                    var labelSection = shapeChildContent.elements.filter(function(e) {
                        return e.attributes && e.attributes.N === 'Field';
                    });
                    labelSection = labelSection.length > 0 ? labelSection[0] : [];
                    if (labelSection.type) {
                        childRes.elements.push(labelSection);
                        hasText = true;
                    }
                    elem.elements.forEach(function(el) {
                        if (el.name === 'Cell') {
                            childEl = shapeChildContent.elements.filter(function(e) {
                                return e.attributes && e.attributes.N === el.attributes.N;
                            });
                            el = childEl.length > 0 ? childEl[0] : el;
                            childRes.elements.push(el);
                        } else if (!hasText && el.name === 'Text') {
                            childEl = shapeChildContent.elements.filter(function(e) {
                                return e.name === 'Text';
                            });
                            el = childEl.length > 0 ? childEl[0] : el;
                            childRes.elements.push(el);
                            hasText = !!el.elements;
                        } else {
                            childRes.elements.push(el);
                        }
                    });
                    var fillGradient = shapeChildContent.elements.filter(function(e) {
                        return e.attributes && e.attributes.N === 'FillGradient';
                    });
                    fillGradient = fillGradient.length > 0 ? fillGradient[0] : [];
                    if (fillGradient.type) {
                        childRes.elements.push(fillGradient);
                    }
                    var character = shapeChildContent.elements.filter(function(e) {
                        return e.attributes && e.attributes.N === 'Character';
                    });
                    character = character.length > 0 ? character[0] : [];
                    if (character.type) {
                        childRes.elements.push(character);
                    }
                    if (hasText) {
                        chSh.push(childRes);
                        hasText = false;
                    }
                });
                element.elements = chSh;
                res.push(element);
            } else {
                res.push(element);
            }
        });
        var fillGradient = shapeContent.filter(function(e) {
            return e.attributes && e.attributes.N === 'FillGradient';
        });
        fillGradient = fillGradient.length > 0 ? fillGradient[0] : [];
        if (fillGradient.type) {
            res.push(fillGradient);
        }
        return res;
    }

    /*function getShapesOpt(shapes) {
        try {
            shapes.forEach(function(item) {
                var masterContent = item.attributes.Master ? getMasterById(item.attributes.Master) : null;
                var childShapes = [];
                var shape, groupShape;
                /!*var relation = item.elements.filter(function(e) {
                    return e.attributes && e.attributes.N === 'Relationships';
                });
                relation = relation[0].attributes.F;
                console.log(relation);
                console.log(relation.match(/Sheet+\.+[0-9]+/gm));*!/
                if (masterContent && masterContent.name.split('.')[0] === 'CFF Container') {
                    groupShape = getChildShape(item, masterContent, false);
                    result.shapes.push(groupShape.shape);
                    result.shapes = result.shapes.concat(groupShape.childShapes);
                } else if (masterContent && masterContent.name.split('.')[0] === 'Swimlane List') {
                    // getAllPropertiesForShape(item, masterContent.elements.elements);
                }  else if (masterContent && masterContent.name.split('.')[0] === 'Swimlane') {
                    groupShape = getChildShape(item, masterContent, false);
                    result.shapes.push(groupShape.shape);
                    var swimlaneShapes = getAttribute(item.elements, 'name', 'Shapes')[0];
                    var tabShape = getShapeCellAttr(swimlaneShapes.elements[1].elements, '1');
                    tabShape.attributes = swimlaneShapes.elements[1].attributes;
                    tabShape.cell.fill = '#d8d8d8';
                    tabShape.cell.width = tabShape.cell.height ? tabShape.cell.height : 50;
                    tabShape.cell.height = groupShape.shape.cell.height;
                    tabShape.cell.x = groupShape.shape.cell.x;
                    tabShape.cell.y = groupShape.shape.cell.y;
                    tabShape.text.rotate = 'rotate(-90)';
                    result.shapes.push(tabShape);
                }  else if (masterContent && masterContent.name.split('.')[0] === 'Phase List') {
                    // getAllPropertiesForShape(item, masterContent.elements.elements);
                }  else if (masterContent && masterContent.name.split('.')[0] === 'Separator') {
                    groupShape = getChildShape(item, masterContent, true);
                    groupShape.childShapes[0].cell.x -= 50;
                    result.shapes = result.shapes.concat(groupShape.childShapes);
                } else {
                    shape = getShapeCellAttr(item.elements, item.attributes.Type);
                    shape.opt = {};
                    shape.attributes = item.attributes;
                    if (shape.connector.begin || shape.connector.end) {
                        shape.connector.line = getConnectorStyle(shape);
                        shape.opt.type = 'Connector';
                        shape.geometry = getGeometry(null, item);
                        result.connectors.push(shape);
                    } else if (shape.section.length > 0) {
                        var shapeType = getAttribute(shape.section, 'T', 'Ellipse');
                        if (shapeType.length > 0) {
                            shape.opt.type = 'Ellipse';
                        } else {
                            if (shape.attributes.Type === 'Foreign') {
                                shape.opt.type = 'Image';
                            } else {
                                shape.opt.type = 'Rectangle';
                            }
                        }
                        if (item.attributes.Master) {
                            shape.geometry = getGeometry(masterContent.filePath, item);
                            shape.scratch = getScratch(masterContent.filePath);
                            if (item.attributes.Type !== 'Group') {
                                if (masterContent.name === 'MacroBuc') {
                                    shape.opt.type = 'Rectangle';
                                    shape.cell.strokeRadius = 50;
                                    var shapeMasterMB = getShapeCellAttr(masterContent.elements.elements);
                                    var text = shape.text.body.text;
                                    shape.cell.fill = (!shape.cell.fill) ? shapeMasterMB.cell.fill : shape.cell.fill;
                                    shape.text = shapeMasterMB.text;
                                    shape.text.body.text = text;
                                    shape.text.label.text = text;
                                    shape.text.label.refX = '20';
                                    shape.text.label.refY = '20';
                                } else if (masterContent.name === 'Topic') {
                                    shape.cell.width = shape.cell.width ? shape.cell.width : 125;
                                    // shape.cell.width = 125;
                                    var styleType = getAttribute(shape.cellOthers, 'N', 'QuickStyleType');
                                    var styleVariation = getAttribute(shape.cellOthers, 'N', 'QuickStyleVariation');
                                    if (styleType.length > 0 && styleVariation.length > 0) {
                                        shape.cell.height = shape.cell.height ? shape.cell.height : 50;
                                        // shape.cell.height = 50;
                                        shape.opt.type = 'Topic1';
                                    } else if (styleType.length > 0 || styleVariation.length > 0) {
                                        shape.cell.height = shape.cell.height ? shape.cell.height : 68;
                                        // shape.cell.height = 68;
                                        shape.opt.type = 'Topic';
                                    } else {
                                        shape.cell.height = shape.cell.height ? shape.cell.height : 50;
                                        // shape.cell.height = 50;
                                        shape.text.label.textVerticalAnchor = 'top';
                                        shape.text.label.textAnchor = 'middle';
                                        shape.text.label.refX = '50%';
                                        shape.text.label.refY = '-35';
                                        shape.cell.strokeWeight = 4;
                                        shape.opt.type = 'Topic2';
                                    }
                                } else if (masterContent.name === 'Outer list') {
                                    shape.cell.fill = shape.cell.fill || 'none';
                                    shape.opt.type = 'Legend';
                                    shape.text = getAttribute(item.elements, 'U', 'STR')[0].V || {};
                                } else if (masterContent.name === 'Inner list' || masterContent.name === 'Field container') {
                                    shape.cell.fill = shape.cell.fill || 'none';
                                    shape.cell.strokeColor = (masterContent.name === 'Inner list') ? 'none' : shape.cell.strokeColor;
                                    shape.opt.type = 'Rectangle';
                                } else if (masterContent.name === 'Icon item') {
                                    // legend flags
                                    if (item.attributes.Type === 'Group') {
                                        var groupShapes = getAttribute(item.elements, 'name', 'Shape')[0] || '';
                                        if (groupShapes !== '' && groupShapes.attributes.NameU === 'Flags') {
                                            shape.cell.fill = getAttribute(groupShapes, 'N', 'FillForegnd')[0] ? getAttribute(groupShapes, 'N', 'FillForegnd')[0].V : 'none';
                                        }
                                    }
                                    shape.cell.fill = shape.cell.fill || 'none';
                                    shape.cell.strokeWeight = shape.cell.strokeWeight || 0;
                                    shape.opt.type = 'Icon item';
                                    // shape.cell.height = shape.cell.height ? shape.cell.height: 25;
                                    // shape.cell.width = shape.cell.width ? shape.cell.width: 20;
                                    shape.cell.height = 25;
                                    shape.cell.width = 20;
                                    var pinIconTextY = getAttribute(item.elements, 'N', 'PinY')[0].V * 100;
                                    shape.cell.y = ((result.paperOpt.height) - (pinIconTextY + (shape.cell.height - shape.cell.height / 2)));
                                    result.legends.push({ body: shape.text.body.text, x: shape.cell.x, y: shape.cell.y });
                                } else if (masterContent.name === 'Orthogonal') {
                                    shape.cell.fill = shape.cell.fill || 'none';
                                    shape.cell.strokeWeight = shape.cell.strokeWeight || 0;
                                    shape.opt.type = 'Rectangle';
                                    shape.cell.height = shape.cell.height ? shape.cell.height : 20;
                                    var legendId = getAttribute(item.elements, 'N', 'Relationships')[0].F;
                                    legendId = legendId.split('Sheet.')[1].split('!')[0];
                                    var connector = { section: {}, text: {}, cell: shape.cell, attributes: { ID: +item.attributes.ID + 100, Type: 'Legend', Master: '5' }, connector: { begin: +legendId, end: +item.attributes.ID, line: { line: { sourceMarker: '', targetMarker: '', stroke: shape.cell.strokeColor, strokeWidth: 2.083333333333333 }}, beginX: { v: 47.5, u: null }}, opt: { type: 'Connector' }};
                                    result.connectors.push(connector);
                                } else if (masterContent.name === 'CBV item') {
                                    // lagend squers
                                    shape.cell.fill = shape.cell.fill || 'none';
                                    shape.cell.strokeWeight = shape.cell.strokeWeight || 0;
                                    shape.opt.type = 'CBV item';
                                    shape.cell.height = 20;
                                    shape.cell.width = 20;
                                    var pinTextY = getAttribute(item.elements, 'N', 'PinY')[0].V * 100;
                                    shape.cell.y = ((result.paperOpt.height) - (pinTextY + (shape.cell.height - shape.cell.height / 2)));
                                    result.legends.push({ body: getAttribute(item.elements, 'N', 'Value')[0].V || '', x: shape.cell.x, y: shape.cell.y });
                                } else {
                                    // var items = getAllPropertiesForShape(item.elements, masterContent.elements.elements, masterContent.name);
                                    // shape = getShapeCellAttr(items, item.attributes.Type);
                                    // shape.attributes = item.attributes;
                                    shape.opt = getShapeOptByType(masterContent.name);
                                    shape.geometry = getGeometry(null, item);
                                    // shape.cell.height = shape.cell.height ? shape.cell.height: shape.opt.opt.height;
                                    // shape.cell.width = shape.cell.width ? shape.cell.width: shape.opt.opt.width;
                                }
                                shape.cell.height = shape.cell.height ? shape.cell.height : 75;
                                var pinY = getAttribute(item.elements, 'N', 'PinY')[0].V * 100;
                                /!*
                                var pinX = getAttribute(item.elements, 'N', 'PinX')[0].V * 100;
                                shape.cell.x = pinX - shape.cell.width / 2;*!/
                                shape.cell.y = ((result.paperOpt.height) - (pinY + (shape.cell.height - shape.cell.height / 2)));
                                if (masterContent.name === 'Field container') {
                                    shape.cell.height -= 3;
                                    shape.cell.y = ((result.paperOpt.height) - (pinY-4));
                                    var textCont = getAttribute(item.elements, 'U', 'STR')[1].V || '';
                                    var label = getTextPosition([1, 0], textCont);
                                    shape.text = { body: { type: 'text', text: textCont }, fontFamily: 'Arial', label: label };
                                }
                                shape.orType = masterContent.name;
                            } else {
                                childShapes = [];
                                var shapeMasterContent = getMasterContent(masterContent.filePath);
                                var shapeMaster = getShapeCellAttr(shapeMasterContent, '1');
                                var pY = +(getAttribute(item, 'N', 'PinY')[0].V) * 100;
                                shape.cell.height = shape.cell.height ? shape.cell.height : shapeMaster.cell.height;
                                shape.cell.width = shape.cell.width ? shape.cell.width : shapeMaster.cell.width;
                                shape.cell.y = (result.paperOpt.height - (pY + (shape.cell.height - shapeMaster.cell.locY)));
                                var fillBg = shape.cell.fill || getAttribute(masterContent.elements.elements, 'N', 'FillForegnd')[0].V;
                                shape.cell.fill = fillBg;
                                shape.cell.x -= shapeMaster.cell.locX;
                                var localShapes = getAttribute(item, 'name', 'Shapes')[0];
                                if (localShapes.elements.length > 0) {
                                    localShapes.elements.forEach(function(s) {
                                        if (s.attributes.NameU === 'Circle callout') {
                                            var localMasterShape = getAttribute(masterContent.elements, 'name', 'Shapes')[0].elements[0];
                                            localMasterShape = getShapeCellAttr(localMasterShape.elements, '1');
                                            var locShape = getShapeCellAttr(s.elements, '1');
                                            locShape.attributes = s.attributes;
                                            locShape.cell.width = !locShape.cell.width ? localMasterShape.cell.width : locShape.cell.width;
                                            locShape.cell.x = shape.cell.x - locShape.cell.width / 2;
                                            locShape.cell.locX = !locShape.cell.locX ? localMasterShape.cell.locX : locShape.cell.locX;
                                            locShape.cell.height = !locShape.cell.height ? localMasterShape.cell.height : locShape.cell.height;
                                            locShape.cell.fill = !locShape.cell.fill ? localMasterShape.cell.fill : locShape.cell.fill;
                                            locShape.cell.y = shape.cell.y - locShape.cell.height / 2;
                                            locShape.cell.strokeRadius = 10;
                                            locShape.parentShape = item.attributes.ID;
                                            locShape.geometry = getGeometry(null, s);
                                            childShapes.push(locShape);
                                        }
                                    });
                                }
                            }
                            shape.cell.fill = getDefaultStyles(shape) || shape.cell.fill;
                        } else {
                            shape.geometry = getGeometry(null, item);
                        }
                        result.shapes.push(shape);
                        result.shapes = result.shapes.concat(childShapes);
                    } else if (item.attributes.Master) {
                        var masterContentById = getMasterById(item.attributes.Master);
                        shape = getShapeCellAttr(item.elements, masterContentById);
                        shape.attributes = item.attributes;
                        shape.opt = getShapeOptByType(masterContentById.name);
                        shape.cell.height = shape.cell.height ? shape.cell.height: shape.opt.opt.height;
                        shape.cell.width = shape.cell.width ? shape.cell.width: shape.opt.opt.width;
                        var pinYM = getAttribute(item.elements, 'N', 'PinY')[0].V * 100;
                        shape.cell.y = ((result.paperOpt.height) - (pinYM + (shape.cell.height - shape.cell.height / 2)));
                        shape.orType = masterContentById.name;
                        shape.cell.fill = getDefaultStyles(shape);
                        shape.geometry = getGeometry(masterContent.filePath, item);
                        shape.opt.opt.path = convertToSvg(shape.geometry[0]);
                        result.shapes.push(shape);
                    }
                    /!*
                    Temp
                    if (item.attributes.Type === 'Group' && shape.opt.type !== 'Icon item') {
                        var groupShapes = getAttribute(item.elements, 'name', 'Shape')[0] || '';
                        var parrentX = shape.cell.x;
                        var parrentY = shape.cell.y;
                        var parrentHeight = shape.cell.height;
                        if (groupShapes !== '' && groupShapes.attributes.NameU === 'Flags') {
                            shape = getShapeCellAttr(groupShapes.elements);
                            shape.opt = {};
                            shape.attributes = groupShapes.attributes;
                            shape.cell.fill = shape.cell.fill || 'none';
                            shape.cell.strokeWeight = shape.cell.strokeWeight || 0;
                            shape.opt.type = 'Icon item';
                            shape.cell.height = 25;
                            shape.cell.width = 20;
                            shape.cell.x += parrentX;
                            var pinYFlag = +(getAttribute(groupShapes.elements, 'N', 'PinY')[0].V);
                            shape.cell.y = ((parrentHeight) - (pinYFlag + (shape.cell.height + shape.cell.height / 2))) + parrentY - parrentHeight;
                            result.shapes.push(shape);
                        }
                    }*!/
                }
            });
            callback.call(this, result);
        } catch (e) {
            return false;
        }
    }*/

    function getShapesOptNew(shapes) {
        try {
            shapes.forEach(function(item) {
                var masterContent = item.attributes.Master ? getMasterById(item.attributes.Master) : null;
                var shape, groupShape;
                /*var relation = item.elements.filter(function(e) {
                    return e.attributes && e.attributes.N === 'Relationships';
                });
                relation = relation[0].attributes.F;
                console.log(relation);
                console.log(relation.match(/Sheet+\.+[0-9]+/gm));*/
                if (masterContent && masterContent.name.split('.')[0] === 'CFF Container') {
                    groupShape = getChildShape(item, masterContent, false);
                    result.shapes.push(groupShape.shape);
                    result.shapes = result.shapes.concat(groupShape.childShapes);
                } else if (masterContent && masterContent.name.split('.')[0] === 'Swimlane List') {
                    // getAllPropertiesForShape(item, masterContent.elements.elements);
                }  else if (masterContent && masterContent.name.split('.')[0] === 'Swimlane') {
                    groupShape = getChildShape(item, masterContent, false);
                    result.shapes.push(groupShape.shape);
                    var swimlaneShapes = getAttribute(item.elements, 'name', 'Shapes')[0];
                    var tabShape = getShapeCellAttr(swimlaneShapes.elements[1].elements, '1');
                    tabShape.attributes = swimlaneShapes.elements[1].attributes;
                    tabShape.cell.fill = '#d8d8d8';
                    tabShape.cell.width = tabShape.cell.height ? tabShape.cell.height : 50;
                    tabShape.cell.height = groupShape.shape.cell.height;
                    tabShape.cell.x = groupShape.shape.cell.x;
                    tabShape.cell.y = groupShape.shape.cell.y;
                    tabShape.text.rotate = 'rotate(-90)';
                    result.shapes.push(tabShape);
                }  else if (masterContent && masterContent.name.split('.')[0] === 'Phase List') {
                    // getAllPropertiesForShape(item, masterContent.elements.elements);
                }  else if (masterContent && masterContent.name.split('.')[0] === 'Separator') {
                    groupShape = getChildShape(item, masterContent, true);
                    groupShape.childShapes[0].cell.x -= 50;
                    result.shapes = result.shapes.concat(groupShape.childShapes);
                } else {
                    shape = getShapeCellAttr(item.elements, item.attributes.Type);
                    shape.opt = {};
                    shape.attributes = item.attributes;
                    if (shape.connector.begin || shape.connector.end) {
                        shape.connector.line = getConnectorStyle(shape);
                        shape.opt.type = 'Connector';
                        shape.geometry = getGeometry(null, item);
                        result.connectors.push(shape);
                    } else {
                        var masterContentById = getMasterById(item.attributes.Master);
                        item.elements = getAllPropertiesForShape(item.elements, masterContent.elements.elements, masterContent.name);
                        shape = getShapeCellAttr(item.elements, masterContentById);
                        shape.attributes = item.attributes;
                        shape.opt = getShapeOptByType(masterContentById.name);
                        shape.orType = masterContentById.name;
                        shape.cell.fill = getDefaultStyles(shape);
                        shape.geometry = getGeometry(masterContent.filePath, item);
                        shape.opt.opt.path = convertToSvg(shape.geometry[0]);
                        result.shapes.push(shape);
                    }
                }
            });
            callback.call(this, result);
        } catch (e) {
            return false;
        }
    }
    
    function convertToSvg(geo) {
        var res = '';
        geo.elements.forEach(function(el) {
            if (el.name === 'Row') {
                switch(el.attributes.T) {
                    case 'MoveTo':
                        res += 'M' + getElementValues(el.elements);
                        break;
                    case 'LineTo':
                        res += ' L' + getElementValues(el.elements);
                        break;
                    case 'EllipticalArcTo':
                        res += ' C' + getElementValues(el.elements);
                        break;
                    default:
                        break;
                }
            }
        });
        return res;
    }
    
    function getElementValues(elements) {
        var res = '';
        var x, y, a, b, c, d;
        elements.forEach(function(el) {
            switch(el.attributes.N) {
                case 'X':
                    x = (+el.attributes.V) * 100;
                    res += ' ' + x;
                    break;
                case 'Y':
                    y = -(+el.attributes.V) * 100;
                    res += ' ' + y;
                    break;
                case 'A':
                    a = (+el.attributes.V) * 100;
                    res += ' ' + a;
                    break;
                case 'B':
                    b = (+el.attributes.V) * 100;
                    res += ' ' + b;
                    break;
                case 'C':
                    c = (+el.attributes.V) * 100;
                    res += ' ' + c;
                    break;
                case 'D':
                    d = (+el.attributes.V) * 100;
                    res += ' ' + d;
                    break;
                default:
                    break;
            }
        });
        return res;
    }
    
    function getStyleForAnnotation(cells) {
        var res = {};
        cells.forEach(function(cell) {
            switch(cell.attributes.N) {
                case 'Font':
                    res['font-family'] = cell.attributes.V;
                    break;
                case 'Color':
                    res.fill = cell.attributes.V;
                    break;
                case 'Style':
                    res.style = getAnnotationStyle(cell.attributes.V);
                    break;
                case 'Size':
                    res['font-size'] = +cell.attributes.V * 100;
                    break;
                default:
                    break;
            }
        });
        return res;
    }

    function getShapeCellAttr(shapeElements, type) {
        var shape = {
            cell: {},
            opt: {
                type: 'Rectangle'
            },
            text: {},
            section: [],
            cellOthers: [],
            connector: {}
        };
        shapeElements.forEach(function(el) {
            var breakText = false;
            if (el.name.toLowerCase() === 'cell') {
                switch(el.attributes.N) {
                    case 'PinX':
                        shape.cell.x = Math.round(+el.attributes.V * 100);
                        break;
                    case 'PinY':
                        shape.cell.y = Math.round(el.attributes.V * 100);
                        break;
                    case 'LocPinX':
                        shape.cell.locX = Math.round(+el.attributes.V * 100);
                        shape.cell.x = (type === 'Group') ? shape.cell.x : shape.cell.x - shape.cell.locX;
                        break;
                    case 'LocPinY':
                        shape.cell.locY = Math.round(+el.attributes.V * 100);
                        shape.cell.y = (result.paperOpt.height - (shape.cell.y + (shape.cell.height - shape.cell.locY)));
                        break;
                    case 'Width':
                        shape.cell.width = Math.round(+el.attributes.V * 100);
                        break;
                    case 'Height':
                        shape.cell.height = Math.round(+el.attributes.V * 100);
                        break;
                    case 'FillForegnd':
                        shape.cell.fill = el.attributes.V;
                        break;
                    case 'FillBkgnd':
                        shape.cell.fill = el.attributes.V;
                        shape.cell.fillFunc = el.attributes.F;
                        break;
                    case 'Rounding':
                        shape.cell.strokeRadius = +el.attributes.V * 100;
                        break;
                    case 'LineColor':
                        shape.cell.strokeColor = el.attributes.V;
                        shape.cell.strokeColor = shape.cell.strokeColor === '0' ? '#000000' : shape.cell.strokeColor;
                        break;
                    case 'LineWeight':
                        shape.cell.strokeWeight = +el.attributes.V * 100;
                        break;
                    case 'BegTrigger':
                        if (el.attributes.F) {
                            shape.connector.begin = el.attributes.F.match(/\d+/) ? +(el.attributes.F.match(/\d+/)[0]) : '';
                        } else if (el.attributes.V) {
                            shape.connector.begin = +el.attributes.V;
                        }
                        break;
                    case 'EndTrigger':
                        if (el.attributes.F) {
                            shape.connector.end = el.attributes.F.match(/\d+/) ? +(el.attributes.F.match(/\d+/)[0]) : '';
                        } else if (el.attributes.V) {
                            shape.connector.begin = +el.attributes.V;
                        }
                        break;
                    case 'BeginArrow':
                        shape.cell.strokeBeginArrow = +el.attributes.V;
                        break;
                    case 'EndArrow':
                        shape.cell.strokeEndArrow = +el.attributes.V;
                        break;
                    case 'BeginX':
                        shape.connector.beginX = +el.attributes.V * 100;
                        break;
                    case 'BeginY':
                        shape.connector.beginY = +el.attributes.V * 100;
                        break;
                    case 'EndX':
                        shape.connector.endX = +el.attributes.V * 100;
                        break;
                    case 'EndY':
                        shape.connector.endY = +el.attributes.V * 100;
                        break;
                    case 'FillGradientDir':
                        shape.cell.fillGradientType = el.attributes.V;
                        break;
                    case 'FillGradientAngle':
                        shape.cell.fillGradientAngle = +el.attributes.V * 100;
                        break;
                    case 'FillGradientEnabled':
                        shape.cell.fillGradientEnabled = el.attributes.V;
                        break;
                    case 'UseGroupGradient':
                        shape.cell.fillGradientGroup = el.attributes.V;
                        break;
                    case 'Angle':
                        var rotRes = 360 - (function(x) { return x * 180 / Math.PI; })(+el.attributes.V);
                        rotRes = Math.round((rotRes % 360) * 100) / 100;
                        shape.cell.rotate = rotRes;
                        break;
                    case 'QuickStyleFillColor':
                        shape.cell.quickStyleFillColor = +el.attributes.V;
                        break;
                    case 'QuickStyleLineMatrix':
                        shape.cell.quickStyleLineMatrix = +el.attributes.V;
                        break;
                    default:
                        shape.cellOthers.push(el.attributes);
                        break;
                }
            } else if (el.name === 'Text' || (el.attributes && el.attributes.N === 'Field')) {
                var textArray = getAttribute(el.elements, 'type', 'text');
                var textRes = { type: 'text', text: '' };
                if (textArray.length > 1) {
                    var characters = shapeElements.filter(function(e) {
                        return e.attributes && e.attributes.N === 'Character';
                    });
                    characters = characters[0] ? characters[0] : [];
                    shape.annotations = [];
                    var start = 0;
                    var end = 0;
                    textArray.forEach(function(t, index) {
                        var attrs = getStyleForAnnotation(characters.elements[index].elements);
                        start = end;
                        end += t.text.length;
                        shape.annotations.push({ start: start, end: end, attrs: attrs });
                        textRes.text += t.text;
                    });
                    shape.text.body = textRes;
                } else {
                    shape.text.body = textArray[0] || { type: 'text', text: '' };
                }
                if (!shape.text.body.text) {
                    var fieldText = getAttribute(el.elements, 'name', 'Cell');
                    shape.text.body.text = (fieldText.length > 0) ? fieldText[0].attributes.V : '';
                }
                var hAlign = getAttribute(shape, 'N', 'HorzAlign')[0] ? getAttribute(shape, 'N', 'HorzAlign')[0].V : '1';
                var vAlign = getAttribute(shape, 'N', 'VerticalAlign')[0] ? getAttribute(shape, 'N', 'VerticalAlign')[0].V : '1';
                var textStyle = getAttribute(shape, 'N', 'Style')[0] ? getAttribute(shape, 'N', 'Style')[0].V : '0';
                var label;
                breakText = joint.util.breakText(shape.text.body.text.trim(), { width: getBreakTextWidth(shape.cell.width) });
                label = getTextPosition([hAlign, vAlign], breakText);
                label.fill = getAttribute(shape, 'N', 'Color')[0] ? getAttribute(shape, 'N', 'Color')[0].V : '#000000';
                shape.text.fontFamily = getAttribute(shape, 'N', 'Font')[0] ? getAttribute(shape, 'N', 'Font')[0].V : '';
                if ((shape.text.fontFamily === '' || shape.text.fontFamily === 'Themed') && result.theme) {
                    shape.text.fontFamily = getAttribute(result.theme, 'name', 'a:majorFont')[0].elements[0].attributes.typeface;
                } else {
                    shape.text.fontFamily = 'Arial';
                }
                label.fontSize = getAttribute(shape, 'N', 'Size')[0] ? Math.round(+getAttribute(shape, 'N', 'Size')[0].V * 100) : 14;
                shape.text.label = getFontStyle(textStyle, label);
            } else if (el.name.toLowerCase() === 'section') {
                shape.section.push(el.attributes);
                shape.section.push(el.elements);
                if (el.attributes && el.attributes.N === 'FillGradient') {
                    var fillBg = {};
                    fillBg.type = (!shape.cell.fillGradientType || shape.cell.fillGradientType === '0') ? 'linearGradient' : 'radialGradient';
                    fillBg.stops = [];
                    el.elements.forEach(function(grEl) {
                        if (grEl.elements && getAttribute(grEl.elements, 'N', 'GradientStopPosition')[0] && getAttribute(grEl.elements, 'N', 'GradientStopColor')[0]) {
                            fillBg.stops.push({ offset: (+(getAttribute(grEl.elements, 'N', 'GradientStopPosition')[0].V)*100) + '%', color: getAttribute(grEl.elements, 'N', 'GradientStopColor')[0].V });
                        }
                    });
                    /* type of gradients
                    * [
                    * {direction: 'from left to right', attrs: { x1: '0%', y1: '100%', x2: '100%', y2: '100%' }, angle: '0'},
                    * {direction: 'from top to down', attrs: { x1: '0%', y1: '0%', x2: '0%', y2: '100%' }, angle: '90'},
                    * ]
                    * */
                    if (shape.cell.fillGradientAngle === 0) {
                        fillBg.attrs = { x1: '0%', y1: '100%', x2: '100%', y2: '100%' };
                    } else {
                        fillBg.attrs = { x1: '0%', y1: '0%', x2: '0%', y2: '100%' };
                    }
                    shape.cell.fill = (fillBg.stops.length > 0) ? fillBg : shape.cell.fill;
                } else if (el.attributes && el.attributes.N === 'Geometry' && (shape.connector.end || shape.connector.begin)) {
                    var vertices = [];
                    var x, y;
                    for (var i = 0; i < el.elements.length; i++) {
                        var point = el.elements[i];
                        x = getAttribute(point.elements, 'N', 'X');
                        x = (x[0] && x[0].V) ? +x[0].V * 100 : 0;
                        y = getAttribute(point.elements, 'N', 'Y');
                        y = (y[0] && y[0].V) ? +y[0].V * 100 : 0;
                        if (point.attributes.T === 'LineTo') {
                            vertices.push({ attr: point.attributes.T, x: x, y: -y });
                            /*if (el.elements.length > 2 && i > 1 && vertices[i-1] && i !== el.elements.length - 1) {
                                console.log(x, vertices[i-1]);
                                console.log(x, vertices[i-2]);
                                var diffX = Math.abs(vertices[i-1].x - vertices[i-2].x);
                                var diffY = Math.abs(vertices[i-1].x - vertices[i-2].x);
                                if (diffX > 1 && diffY > 1) {
                                    continue;
                                } else {
                                    vertices = [];
                                    break;
                                }
                            }*/
                        }
                    }
                    // console.log(vertices);
                    shape.connector.vertices = vertices.length > 1 ? vertices : [];
                }
            } else if (el.name.toLowerCase() === 'foreigndata') {
                var relId = getAttribute(el, 'name', 'Rel')[0].attributes['r:id'];
                var imagePath = getAttribute(result.rels, 'Id', relId)[0].Target.split('/');
                shape.image = imagePath[imagePath.length - 1];
            }
        });
        return shape;
    }

    // find val by attribute
    function getAttribute(obj, key, val) {
        var objects = [];
        for (var i in obj) {
            if (!obj.hasOwnProperty(i)) continue;
            if (typeof obj[i] === 'object') {
                objects = objects.concat(getAttribute(obj[i], key, val));
            } else if (i === key && obj[i] === val || i === key && val === '') {
                objects.push(obj);
            } else if (obj[i] === val && key === '') {
                if (objects.lastIndexOf(obj) === -1) {
                    objects.push(obj);
                }
            }
        }
        return objects;
    }

    // getting a text position
    function getTextPosition(val, breakText) {
        var res = {
            text: breakText,
            textVerticalAnchor: 'bottom',
            textAnchor: 'end',
            refX: '99%',
            refY: '99%'
        };
        switch ((val.toString())) {
            case '0,0':
                res.textVerticalAnchor = 'top';
                res.textAnchor = 'start';
                res.refX = '5';
                res.refY = '5';
                break;
            case '1,0':
                res.textVerticalAnchor = 'top';
                res.textAnchor = 'middle';
                res.refX = '50%';
                res.refY = '5';
                break;
            case '2,0':
                res.textVerticalAnchor = 'top';
                res.textAnchor = 'end';
                res.refX = '99%';
                res.refY = '5';
                break;
            case '0,1':
                res.textVerticalAnchor = 'middle';
                res.textAnchor = 'start';
                res.refX = '5';
                res.refY = '50%';
                break;
            case '1,1':
                res.textVerticalAnchor = 'middle';
                res.textAnchor = 'middle';
                res.refX = '50%';
                res.refY = '50%';
                break;
            case '2,1':
                res.textVerticalAnchor = 'middle';
                res.textAnchor = 'end';
                res.refX = '99%';
                res.refY = '50%';
                break;
            case '0,2':
                res.textVerticalAnchor = 'bottom';
                res.textAnchor = 'start';
                res.refX = '5';
                res.refY = '99%';
                break;
            case '1,2':
                res.textVerticalAnchor = 'bottom';
                res.textAnchor = 'middle';
                res.refX = '50%';
                res.refY = '99%';
                break;
            case '2,2':
                res.textVerticalAnchor = 'bottom';
                res.textAnchor = 'end';
                res.refX = '99%';
                res.refY = '99%';
                break;
            default:
                res.textVerticalAnchor = 'middle';
                res.textAnchor = 'middle';
                res.refX = '50%';
                res.refY = '50%';
        }
        return res;
    }

    // getting breakText width
    function getBreakTextWidth(w) {
        var width = w ? w : 100;
        var res;
        if (width > 600) {
            res = width - width / 1.32;
        } else if (width > 300 && width < 600) {
            res = width - width / 2;
        } else if (width > 180 && width < 300) {
            res = width - width / 3;
        } else if (width < 180) {
            res = width;
        }
        return res;
    }

    // getting fontStyle
    function getFontStyle(val, label) {
        switch (val) {
            case '17':
                label.fontWeight = 'bold';
                break;
            case '4':
                label.textDecoration = 'underline';
                break;
            case '34':
                label.fontStyle = 'italic';
                break;
            case '51':
                label.fontWeight = 'bold';
                label.fontStyle = 'italic';
                break;
            case '21':
                label.fontWeight = 'bold';
                label.textDecoration = 'underline';
                break;
            case '38':
                label.fontStyle = 'italic';
                label.textDecoration = 'underline';
                break;
            case '55':
                label.fontWeight = 'bold';
                label.fontStyle = 'italic';
                label.textDecoration = 'underline';
                break;
            default:
                label.fontWeight = 'normal';
        }
        return label;
    }

    function getAnnotationStyle(val) {
        var res = '';
        switch (val) {
            case '17':
                res = 'font-weight: bold';
                break;
            case '4':
                res = 'text-decoration: underline';
                break;
            case '34':
                res = 'font-style: italic';
                break;
            case '51':
                res = 'font-weight: bold; font-style: italic';
                break;
            case '21':
                res = 'font-weight: bold; text-decoration: underline';
                break;
            case '38':
                res = 'font-style: italic; text-decoration: underline';
                break;
            case '55':
                res = 'font-weight: bold; font-style: italic; text-decoration: underline';
                break;
            default:
                res = '';
        }
        return res;
    }

    function getConnectorStyle(attrs) {
        var styles = {
            line: {
                stroke: attrs.cell.strokeColor || '#000',
                strokeWidth: attrs.cell.strokeWeight || 1,
                sourceMarker: '',
                targetMarker: ''
            }
        };
        if (attrs.cell.strokeBeginArrow && attrs.cell.strokeBeginArrow !== 0) {
            styles.line.sourceMarker = {
                type: 'path',
                d: 'M 10 -5 0 0 10 5 Z'
            }
        }
        if (attrs.cell.strokeEndArrow && attrs.cell.strokeEndArrow !== 0) {
            styles.line.targetMarker = {
                type: 'path',
                d: 'M 10 -5 0 0 10 5 Z'
            }
        }
        return styles;
    }

};

joint.dia.Graph.prototype.toVisio = function(graph, paper) {
    var allCells = graph.getCells();
    var XMLNS = 'http://schemas.microsoft.com/office/visio/2012/main';
    var XMLNS_R = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships';
    var PAGES_TYPE = 'http://schemas.microsoft.com/visio/2010/relationships/page';
    var RELS_XMLNS = 'http://schemas.openxmlformats.org/package/2006/relationships';
    var VISIO_PAGES = 'visio/pages/';
    var GEO_SIMPLE_SHAPES = {
        rect: [
            {
                'attributes': {
                    'N': 'Geometry',
                    'IX': '0'
                },
                'elements': [
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoFill',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoLine',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoShow',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoSnap',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoQuickDrag',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'RelMoveTo',
                            'IX': '1'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'RelLineTo',
                            'IX': '2'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'RelLineTo',
                            'IX': '3'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '1'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'RelLineTo',
                            'IX': '4'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '1'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'RelLineTo',
                            'IX': '5'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0'
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        ellipse: [
            {
                'attributes': {
                    'N': 'Geometry',
                    'IX': '0'
                },
                'elements': [
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoFill',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoLine',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoShow',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoSnap',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoQuickDrag',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'Ellipse',
                            'IX': '1'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0.6299212608561413',
                                    'F': 'Width*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0.6299212608561433',
                                    'F': 'Height*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'A',
                                    'V': '1.259842521712283',
                                    'U': 'DL',
                                    'F': 'Width*1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'B',
                                    'V': '0.6299212608561433',
                                    'U': 'DL',
                                    'F': 'Height*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'C',
                                    'V': '0.6299212608561413',
                                    'U': 'DL',
                                    'F': 'Width*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'D',
                                    'V': '1.259842521712287',
                                    'U': 'DL',
                                    'F': 'Height*1'
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        cylinder: [
            {
                'attributes': {
                    'N': 'Geometry',
                    'IX': '0'
                },
                'elements': [
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoFill',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoLine',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoShow',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoSnap',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoQuickDrag',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'Ellipse',
                            'IX': '1'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0.5905511811023622',
                                    'U': 'MM',
                                    'F': 'Width*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '1.062992125984252',
                                    'U': 'MM',
                                    'F': 'Height-(Height-Controls.Row_1.Y)*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'A',
                                    'V': '0',
                                    'U': 'MM',
                                    'F': 'Width*0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'B',
                                    'V': '1.062992125984252',
                                    'U': 'MM',
                                    'F': 'Geometry1.Y1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'C',
                                    'V': '0.5905511811023622',
                                    'U': 'MM',
                                    'F': 'Width*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'D',
                                    'V': '1.181102362204724',
                                    'U': 'MM',
                                    'F': 'Height*1'
                                }
                            }
                        ]
                    }
                ]
            },
            {
                'attributes': {
                    'N': 'Geometry',
                    'IX': '1'
                },
                'elements': [
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoFill',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoLine',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoShow',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoSnap',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Cell',
                        'attributes': {
                            'N': 'NoQuickDrag',
                            'V': '0'
                        }
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'MoveTo',
                            'IX': '1'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0',
                                    'U': 'MM',
                                    'F': 'Width*0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0.1181102362204724',
                                    'U': 'MM',
                                    'F': 'User.ControlHalfHeight'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'EllipticalArcTo',
                            'IX': '2'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '1.181102362204724',
                                    'U': 'MM',
                                    'F': 'Width*1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0.1181102362204724',
                                    'U': 'MM',
                                    'F': 'User.ControlHalfHeight'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'A',
                                    'V': '0.5905511811023622',
                                    'U': 'MM',
                                    'F': 'Width*0.5'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'B',
                                    'V': '0',
                                    'U': 'MM',
                                    'F': 'Height*0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'C',
                                    'V': '0',
                                    'U': 'DEG'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'D',
                                    'V': '5',
                                    'F': 'Width/(User.ControlHalfHeight*2)'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'LineTo',
                            'IX': '3'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '1.181102362204724',
                                    'U': 'MM',
                                    'F': 'Width*1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '1.062992125984252',
                                    'U': 'MM',
                                    'F': 'Height-User.ControlHalfHeight'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'LineTo',
                            'IX': '4'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0',
                                    'U': 'MM',
                                    'F': 'Width*0'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '1.062992125984252',
                                    'U': 'MM',
                                    'F': 'Height-User.ControlHalfHeight'
                                }
                            }
                        ]
                    },
                    {
                        'type': 'element',
                        'name': 'Row',
                        'attributes': {
                            'T': 'LineTo',
                            'IX': '5'
                        },
                        'elements': [
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'X',
                                    'V': '0',
                                    'U': 'MM',
                                    'F': 'Geometry1.X1'
                                }
                            },
                            {
                                'type': 'element',
                                'name': 'Cell',
                                'attributes': {
                                    'N': 'Y',
                                    'V': '0.1181102362204724',
                                    'U': 'MM',
                                    'F': 'Geometry1.Y1'
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    };
    var base64ToBlob = function(base64Data, contentType) {
        contentType = contentType || '';
        var sliceSize = 1024;
        var byteCharacters = atob(base64Data);
        var bytesLength = byteCharacters.length;
        var slicesCount = Math.ceil(bytesLength / sliceSize);
        var byteArrays = new Array(slicesCount);

        for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
            var begin = sliceIndex * sliceSize;
            var end = Math.min(begin + sliceSize, bytesLength);

            var bytes = new Array(end - begin);

            for (var offset = begin, i = 0 ; offset < end; ++i, ++offset)
            {
                bytes[i] = byteCharacters[offset].charCodeAt(0);
            }

            byteArrays[sliceIndex] = new Uint8Array(bytes);
        }
        return new Blob(byteArrays, { type: contentType });
    };

    var saveData = function(filename, format, data, mime, base64Encoded) {
        var a = document.createElement('a');
        a.href = URL.createObjectURL((base64Encoded) ?
            base64ToBlob(data, mime) :
            new Blob([data], { type: mime }));

        a.download = filename;
        document.body.appendChild(a);
        try {
            window.setTimeout(function()
            {
                URL.revokeObjectURL(a.href);
            }, 0);

            a.click();
            a.parentNode.removeChild(a);
        }
        catch (e) {
            return false;
        }
    };

    exportCurrentDiagrams(graph);

    // find val by attribute
    function getAttribute(obj, key, val) {
        var objects = [];
        for (var i in obj) {
            if (!obj.hasOwnProperty(i)) continue;
            if (typeof obj[i] === 'object') {
                objects = objects.concat(getAttribute(obj[i], key, val));
            } else if (i === key && obj[i] === val || i === key && val === '') {
                objects.push(obj);
            } else if (obj[i] === val && key === '') {
                if (objects.lastIndexOf(obj) === -1) {
                    objects.push(obj);
                }
            }
        }
        return objects;
    }

    function exportCurrentDiagrams(graph) {
        try {
            var zip = new JSZip();

            var pages = {};
            var modelsAttr = {};

            var pagesCount = 1;
            var modelAttrib = getGraphAttributes(graph);
            var diagramName = 'Page1';
            pages[diagramName] = convertMxModel2Page(graph, modelAttrib);
            modelsAttr[diagramName] = modelAttrib;

            createVsdxSkeleton(zip, pagesCount);

            addPagesXML(zip, pages, modelsAttr);

            var createZipFile = function() {
                zip.generateAsync({ type:'base64' }).then(
                    function(content)
                    {
                        var basename = 'test_visio';
                        saveData(basename + '.vsdx', 'vsdx', content,
                            'application/vnd.visio2013', true);
                    }
                );
            };
            createZipFile();

            return true;
        }
        catch(e) {
            return false;
        }
    }

    function getGraphAttributes(graph) {
        var attr = {};

        try {
            attr.gridEnabled = true;
            attr.gridSize = 1;
            attr.guidesEnabled = true;
            attr.pageVisible = true;
            attr.pageScale = 1;
            attr.pageWidth = paper.options.width;
            attr.pageHeight = paper.options.height;
            attr.backgroundClr = 'red';
            attr.mathEnabled = true;
            attr.shadowVisible = true;
        }
        catch(e) {
            return false;
        }
        return attr;
    }

    function createXmlDocument() {
        var a = null;
        document.implementation&&document.implementation.createDocument?a=document.implementation.createDocument('','',null):
            window.ActiveXObject&&(a=new ActiveXObject('Microsoft.XMLDOM'));
        return a;
    }

    function convertMxModel2Page(graph, modelAttrib) {
        var xmlDoc = createXmlDocument();
        var root = createElt(xmlDoc, XMLNS, 'PageContents');
        var cells = graph.getCells();
        root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', XMLNS);
        root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:r', XMLNS_R);
        var shapes = createElt(xmlDoc, XMLNS, 'Shapes');
        root.appendChild(shapes);
        var connects = createElt(xmlDoc, XMLNS, 'Connects');
        root.appendChild(connects);
        cells.forEach(function(cell) {
            var shape = convertMxCell2Shape(cell, graph, xmlDoc, modelAttrib.pageHeight);
            if (shape != null) {
                shapes.appendChild(shape);
            }
            if (cell.attributes.type === 'standard.Link') {
                var sourceId = cell.attributes.source.id || null;
                var targetId = cell.attributes.target.id || null;
                var startEnd = getLinkStartEnd(sourceId, targetId, cells);
                var connectStart = createElt(xmlDoc, XMLNS, 'Connect');
                connectStart.setAttribute('FromSheet', cell.changed.z);
                connectStart.setAttribute('FromCell', 'BeginX');
                connectStart.setAttribute('FromPart', '9');
                connectStart.setAttribute('ToSheet', startEnd.source);
                connectStart.setAttribute('ToCell', 'Connections.X2');
                connectStart.setAttribute('ToPart', '101');
                connects.appendChild(connectStart);
                var connectEnd = createElt(xmlDoc, XMLNS, 'Connect');
                connectEnd.setAttribute('FromSheet', cell.changed.z);
                connectEnd.setAttribute('FromCell', 'EndX');
                connectEnd.setAttribute('FromPart', '12');
                connectEnd.setAttribute('ToCell', 'PinX');
                connectEnd.setAttribute('ToPart', '3');
                connectEnd.setAttribute('ToSheet', startEnd.target);
                connects.appendChild(connectEnd);
            }
        });
        xmlDoc.appendChild(root);
        return xmlDoc;
    }

    function createElt(doc, ns, name) {
        return (doc.createElementNS != null) ? doc.createElementNS(ns, name) : doc.createElement(name);
    }

    function addPagesXML(zip, pages, modelsAttr) {
        var pagesXmlDoc = createXmlDocument();
        var pagesRelsXmlDoc = createXmlDocument();

        var pagesRoot = createElt(pagesXmlDoc, XMLNS, 'Pages');
        pagesRoot.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', XMLNS);
        pagesRoot.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:r', XMLNS_R);

        var pagesRelsRoot = createElt(pagesRelsXmlDoc, RELS_XMLNS, 'Relationships');

        var i = 1;
        for (var name in pages) {
            var pageName = 'page' + i + '.xml';

            var pageE = createElt(pagesXmlDoc, XMLNS, 'Page');
            pageE.setAttribute('ID', i-1);
            pageE.setAttribute('NameU', name);
            pageE.setAttribute('Name', name);
            pageE.setAttribute('ViewScale', '-1');
            pageE.setAttribute('ViewCenterX', '5.4965275593654');
            pageE.setAttribute('ViewCenterY', '4.2499998311202');

            var pageSheet = createElt(pagesXmlDoc, XMLNS, 'PageSheet');
            var modelAttr = modelsAttr[name];

            pageSheet.appendChild(createCellElem('PageWidth', modelAttr.pageWidth / 100, pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageHeight', modelAttr.pageHeight / 100, pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('ShdwOffsetX', '0.125', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('ShdwOffsetY', '-0.125', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageScale', modelAttr.pageScale, pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageScale', modelAttr.pageScale, pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('DrawingScale', 1, pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('DrawingSizeType', '0', pagesXmlDoc));
            pageSheet.appendChild(createCellElem('DrawingScaleType', '0', pagesXmlDoc));
            pageSheet.appendChild(createCellElem('PlaceStyle', '2', pagesXmlDoc));
            pageSheet.appendChild(createCellElem('RouteStyle', '6', pagesXmlDoc));
            pageSheet.appendChild(createCellElem('PlaceDepth', '1', pagesXmlDoc));
            pageSheet.appendChild(createCellElem('BlockSizeX', '0.375', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('BlockSizeY', '0.375', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('AvenueSizeX', '0.5', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('AvenueSizeY', '0.5', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageShapeSplit', '1', pagesXmlDoc));
            pageSheet.appendChild(createCellElem('PageLeftMargin', '0.25', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageRightMargin', '0.25', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageTopMargin', '0.25', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PageBottomMargin', '0.25', pagesXmlDoc, '', 'IN'));
            pageSheet.appendChild(createCellElem('PrintPageOrientation', '2', pagesXmlDoc));

            var relE = createElt(pagesXmlDoc, XMLNS,'Rel');
            relE.setAttributeNS(XMLNS_R, 'r:id', 'rId' + i);

            var layerSec = createElt(pagesXmlDoc, XMLNS, 'Section');
            layerSec.setAttribute('N', 'Layer');

            var layerRow = createElt(pagesXmlDoc, XMLNS, 'Row');
            layerRow.setAttribute('IX', '0');

            layerSec.appendChild(layerRow);

            layerRow.appendChild(createCellElem('Name', 'Connector', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Color', '255', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Status', '0', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Visible', '1', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Print', '1', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Active', '0', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Lock', '0', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Snap', '1', pagesXmlDoc));
            layerRow.appendChild(createCellElem('Glue', '1', pagesXmlDoc));
            layerRow.appendChild(createCellElem('NameUniv', 'Connector', pagesXmlDoc));
            layerRow.appendChild(createCellElem('ColorTrans', '0', pagesXmlDoc));

            pageSheet.appendChild(layerSec);

            pageE.appendChild(pageSheet);
            pageE.appendChild(relE);
            pagesRoot.appendChild(pageE);

            var relationship = createElt(pagesRelsXmlDoc, RELS_XMLNS, 'Relationship');
            relationship.setAttribute('Id', 'rId' + i);
            relationship.setAttribute('Type', PAGES_TYPE);
            relationship.setAttribute('Target', pageName);
            pagesRelsRoot.appendChild(relationship);
            var xmlDoc = pages[name];
            writeXmlDoc2Zip(zip, VISIO_PAGES + pageName, xmlDoc);
            i++;
        }

        pagesXmlDoc.appendChild(pagesRoot);
        pagesRelsXmlDoc.appendChild(pagesRelsRoot);
        writeXmlDoc2Zip(zip, VISIO_PAGES + 'pages.xml', pagesXmlDoc);
        writeXmlDoc2Zip(zip, VISIO_PAGES + '_rels/pages.xml.rels', pagesRelsXmlDoc);
    }

    function createCellElemScaled(name, val, xmlDoc, formula, u) {
        // return createCellElem(name, val / CONVERSION_FACTOR, xmlDoc, formula, u);
        return createCellElem(name, val / 100, xmlDoc, formula, u);
    }

    function createCellElem(name, val, xmlDoc, formula, u) {
        var cell = createElt(xmlDoc, XMLNS, 'Cell');
        cell.setAttribute('N', name);
        cell.setAttribute('V', val);

        if (formula) cell.setAttribute('F', formula);
        if (u) cell.setAttribute('U', u);

        return cell;
    }

    function writeXmlDoc2Zip(zip, name, xmlDoc, noHeader) {
        zip.file(name, (noHeader? '' : '<?xml version=\'1.0\' encoding=\'UTF-8\' standalone=\'yes\'?>') + getXml(xmlDoc));
    }

    function getXml(a,b){
        var c = '';
        null!=window.XMLSerializer?c=(new XMLSerializer).serializeToString(a):
            null!=a.xml&&(c=a.xml.replace(/\r\n\t[\t]*/g,'').replace(/>\r\n/g,'>').replace(/\r\n/g,'\n'));return c.replace(/\n/g,b||'&#xa;');
    }

    function createVsdxSkeleton(zip, pageCount) {
        var files = {
            '[Content_Types].xml': '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Types xmlns=\'http://schemas.openxmlformats.org/package/2006/content-types\'><Default Extension=\'png\' ContentType=\'image/png\'/><Default Extension=\'jpg\' ContentType=\'image/jpeg\'/><Default Extension=\'jpeg\' ContentType=\'image/jpeg\'/><Default Extension=\'svg\' ContentType=\'image/svg+xml\'/><Default Extension=\'bmp\' ContentType=\'image/bmp\'/><Default Extension=\'gif\' ContentType=\'image/gif\'/><Default Extension=\'emf\' ContentType=\'image/x-emf\' /><Default Extension=\'rels\' ContentType=\'application/vnd.openxmlformats-package.relationships+xml\' /><Default Extension=\'xml\' ContentType=\'application/xml\' /><Override PartName=\'/docProps/app.xml\' ContentType=\'application/vnd.openxmlformats-officedocument.extended-properties+xml\' /><Override PartName=\'/docProps/core.xml\' ContentType=\'application/vnd.openxmlformats-package.core-properties+xml\' /><Override PartName=\'/docProps/custom.xml\' ContentType=\'application/vnd.openxmlformats-officedocument.custom-properties+xml\' /><Override PartName=\'/visio/document.xml\' ContentType=\'application/vnd.ms-visio.drawing.main+xml\' /><Override PartName=\'/visio/masters/masters.xml\' ContentType=\'application/vnd.ms-visio.masters+xml\' /><Override PartName=\'/visio/masters/master1.xml\' ContentType=\'application/vnd.ms-visio.master+xml\'/><Override PartName=\'/visio/pages/page1.xml\' ContentType=\'application/vnd.ms-visio.page+xml\' /><Override PartName=\'/visio/pages/pages.xml\' ContentType=\'application/vnd.ms-visio.pages+xml\' /><Override PartName=\'/visio/windows.xml\' ContentType=\'application/vnd.ms-visio.windows+xml\' /></Types>',
            '_rels/.rels' : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns=\'http://schemas.openxmlformats.org/package/2006/relationships\'><Relationship Id=\'rId1\' Type=\'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\' Target=\'docProps/core.xml\' /><Relationship Id=\'rId2\' Type=\'http://schemas.microsoft.com/visio/2010/relationships/document\' Target=\'visio/document.xml\' /><Relationship Id=\'rId3\' Type=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties\' Target=\'docProps/custom.xml\' /><Relationship Id=\'rId4\' Type=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\' Target=\'docProps/app.xml\' /></Relationships>',
            'docProps/app.xml' :  '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Properties xmlns=\'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\' xmlns:vt=\'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\'><Application>Microsoft Visio</Application><AppVersion>15.0000</AppVersion><Template /><Manager /><Company /><HyperlinkBase /></Properties>',
            'docProps/core.xml' : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><cp:coreProperties xmlns:cp=\'http://schemas.openxmlformats.org/package/2006/metadata/core-properties\' xmlns:dc=\'http://purl.org/dc/elements/1.1/\' xmlns:dcterms=\'http://purl.org/dc/terms/\' xmlns:dcmitype=\'http://purl.org/dc/dcmitype/\' xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'><dc:title /><dc:subject /><dc:creator /><cp:keywords /><dc:description /><cp:category /><dc:language>en-US</dc:language></cp:coreProperties>',
            'docProps/custom.xml' : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Properties xmlns=\'http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\' xmlns:vt=\'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\' />',
            'visio/document.xml': '<?xml version=\'1.0\' encoding=\'utf-8\' ?><VisioDocument xmlns=\'http://schemas.microsoft.com/office/visio/2012/main\' xmlns:r=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships\' xml:space=\'preserve\'><DocumentSettings TopPage=\'0\' DefaultTextStyle=\'3\' DefaultLineStyle=\'3\' DefaultFillStyle=\'3\' DefaultGuideStyle=\'4\'><GlueSettings>9</GlueSettings><SnapSettings>65847</SnapSettings><SnapExtensions>34</SnapExtensions><SnapAngles/><DynamicGridEnabled>1</DynamicGridEnabled><ProtectStyles>0</ProtectStyles><ProtectShapes>0</ProtectShapes><ProtectMasters>0</ProtectMasters><ProtectBkgnds>0</ProtectBkgnds></DocumentSettings><Colors><ColorEntry IX=\'24\' RGB=\'#000000\'/><ColorEntry IX=\'25\' RGB=\'#FFFFFF\'/><ColorEntry IX=\'26\' RGB=\'#FF0000\'/><ColorEntry IX=\'27\' RGB=\'#00FF00\'/><ColorEntry IX=\'28\' RGB=\'#0000FF\'/><ColorEntry IX=\'29\' RGB=\'#FFFF00\'/><ColorEntry IX=\'30\' RGB=\'#FF00FF\'/><ColorEntry IX=\'31\' RGB=\'#00FFFF\'/><ColorEntry IX=\'32\' RGB=\'#800000\'/><ColorEntry IX=\'33\' RGB=\'#008000\'/><ColorEntry IX=\'34\' RGB=\'#000080\'/><ColorEntry IX=\'35\' RGB=\'#808000\'/><ColorEntry IX=\'36\' RGB=\'#800080\'/><ColorEntry IX=\'37\' RGB=\'#008080\'/><ColorEntry IX=\'38\' RGB=\'#C0C0C0\'/><ColorEntry IX=\'39\' RGB=\'#E6E6E6\'/><ColorEntry IX=\'40\' RGB=\'#CDCDCD\'/><ColorEntry IX=\'41\' RGB=\'#B3B3B3\'/><ColorEntry IX=\'42\' RGB=\'#9A9A9A\'/><ColorEntry IX=\'43\' RGB=\'#808080\'/><ColorEntry IX=\'44\' RGB=\'#666666\'/><ColorEntry IX=\'45\' RGB=\'#4D4D4D\'/><ColorEntry IX=\'46\' RGB=\'#333333\'/><ColorEntry IX=\'47\' RGB=\'#1A1A1A\'/><ColorEntry IX=\'48\' RGB=\'#7F7F7F\'/><ColorEntry IX=\'49\' RGB=\'#99004D\'/><ColorEntry IX=\'50\' RGB=\'#FF0080\'/><ColorEntry IX=\'51\' RGB=\'#CC0066\'/></Colors><FaceNames><FaceName NameU=\'Calibri\' UnicodeRanges=\'-536859905 -1073732485 9 0\' CharSets=\'536871423 0\' Panose=\'2 15 5 2 2 2 4 3 2 4\' Flags=\'325\'/></FaceNames><StyleSheets><StyleSheet ID=\'0\' NameU=\'No Style\' IsCustomNameU=\'1\' Name=\'No Style\' IsCustomName=\'1\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LineWeight\' V=\'0.01041666666666667\'/><Cell N=\'LineColor\' V=\'0\'/><Cell N=\'LinePattern\' V=\'1\'/><Cell N=\'Rounding\' V=\'0\'/><Cell N=\'EndArrowSize\' V=\'2\'/><Cell N=\'BeginArrow\' V=\'0\'/><Cell N=\'EndArrow\' V=\'0\'/><Cell N=\'LineCap\' V=\'0\'/><Cell N=\'BeginArrowSize\' V=\'2\'/><Cell N=\'LineColorTrans\' V=\'0\'/><Cell N=\'CompoundType\' V=\'0\'/><Cell N=\'FillForegnd\' V=\'1\'/><Cell N=\'FillBkgnd\' V=\'0\'/><Cell N=\'FillPattern\' V=\'1\'/><Cell N=\'ShdwForegnd\' V=\'0\'/><Cell N=\'ShdwPattern\' V=\'0\'/><Cell N=\'FillForegndTrans\' V=\'0\'/><Cell N=\'FillBkgndTrans\' V=\'0\'/><Cell N=\'ShdwForegndTrans\' V=\'0\'/><Cell N=\'ShapeShdwType\' V=\'0\'/><Cell N=\'ShapeShdwOffsetX\' V=\'0\'/><Cell N=\'ShapeShdwOffsetY\' V=\'0\'/><Cell N=\'ShapeShdwObliqueAngle\' V=\'0\'/><Cell N=\'ShapeShdwScaleFactor\' V=\'1\'/><Cell N=\'ShapeShdwBlur\' V=\'0\'/><Cell N=\'ShapeShdwShow\' V=\'0\'/><Cell N=\'LeftMargin\' V=\'0\'/><Cell N=\'RightMargin\' V=\'0\'/><Cell N=\'TopMargin\' V=\'0\'/><Cell N=\'BottomMargin\' V=\'0\'/><Cell N=\'VerticalAlign\' V=\'1\'/><Cell N=\'TextBkgnd\' V=\'0\'/><Cell N=\'DefaultTabStop\' V=\'0.5\'/><Cell N=\'TextDirection\' V=\'0\'/><Cell N=\'TextBkgndTrans\' V=\'0\'/><Cell N=\'LockWidth\' V=\'0\'/><Cell N=\'LockHeight\' V=\'0\'/><Cell N=\'LockMoveX\' V=\'0\'/><Cell N=\'LockMoveY\' V=\'0\'/><Cell N=\'LockAspect\' V=\'0\'/><Cell N=\'LockDelete\' V=\'0\'/><Cell N=\'LockBegin\' V=\'0\'/><Cell N=\'LockEnd\' V=\'0\'/><Cell N=\'LockRotate\' V=\'0\'/><Cell N=\'LockCrop\' V=\'0\'/><Cell N=\'LockVtxEdit\' V=\'0\'/><Cell N=\'LockTextEdit\' V=\'0\'/><Cell N=\'LockFormat\' V=\'0\'/><Cell N=\'LockGroup\' V=\'0\'/><Cell N=\'LockCalcWH\' V=\'0\'/><Cell N=\'LockSelect\' V=\'0\'/><Cell N=\'LockCustProp\' V=\'0\'/><Cell N=\'LockFromGroupFormat\' V=\'0\'/><Cell N=\'LockThemeColors\' V=\'0\'/><Cell N=\'LockThemeEffects\' V=\'0\'/><Cell N=\'LockThemeConnectors\' V=\'0\'/><Cell N=\'LockThemeFonts\' V=\'0\'/><Cell N=\'LockThemeIndex\' V=\'0\'/><Cell N=\'LockReplace\' V=\'0\'/><Cell N=\'LockVariation\' V=\'0\'/><Cell N=\'NoObjHandles\' V=\'0\'/><Cell N=\'NonPrinting\' V=\'0\'/><Cell N=\'NoCtlHandles\' V=\'0\'/><Cell N=\'NoAlignBox\' V=\'0\'/><Cell N=\'UpdateAlignBox\' V=\'0\'/><Cell N=\'HideText\' V=\'0\'/><Cell N=\'DynFeedback\' V=\'0\'/><Cell N=\'GlueType\' V=\'0\'/><Cell N=\'WalkPreference\' V=\'0\'/><Cell N=\'BegTrigger\' V=\'0\' F=\'No Formula\'/><Cell N=\'EndTrigger\' V=\'0\' F=\'No Formula\'/><Cell N=\'ObjType\' V=\'0\'/><Cell N=\'Comment\' V=\'\'/><Cell N=\'IsDropSource\' V=\'0\'/><Cell N=\'NoLiveDynamics\' V=\'0\'/><Cell N=\'LocalizeMerge\' V=\'0\'/><Cell N=\'NoProofing\' V=\'0\'/><Cell N=\'Calendar\' V=\'0\'/><Cell N=\'LangID\' V=\'en-US\'/><Cell N=\'ShapeKeywords\' V=\'\'/><Cell N=\'DropOnPageScale\' V=\'1\'/><Cell N=\'TheData\' V=\'0\' F=\'No Formula\'/><Cell N=\'TheText\' V=\'0\' F=\'No Formula\'/><Cell N=\'EventDblClick\' V=\'0\' F=\'No Formula\'/><Cell N=\'EventXFMod\' V=\'0\' F=\'No Formula\'/><Cell N=\'EventDrop\' V=\'0\' F=\'No Formula\'/><Cell N=\'EventMultiDrop\' V=\'0\' F=\'No Formula\'/><Cell N=\'HelpTopic\' V=\'\'/><Cell N=\'Copyright\' V=\'\'/><Cell N=\'LayerMember\' V=\'\'/><Cell N=\'XRulerDensity\' V=\'32\'/><Cell N=\'YRulerDensity\' V=\'32\'/><Cell N=\'XRulerOrigin\' V=\'0\'/><Cell N=\'YRulerOrigin\' V=\'0\'/><Cell N=\'XGridDensity\' V=\'8\'/><Cell N=\'YGridDensity\' V=\'8\'/><Cell N=\'XGridSpacing\' V=\'0\'/><Cell N=\'YGridSpacing\' V=\'0\'/><Cell N=\'XGridOrigin\' V=\'0\'/><Cell N=\'YGridOrigin\' V=\'0\'/><Cell N=\'Gamma\' V=\'1\'/><Cell N=\'Contrast\' V=\'0.5\'/><Cell N=\'Brightness\' V=\'0.5\'/><Cell N=\'Sharpen\' V=\'0\'/><Cell N=\'Blur\' V=\'0\'/><Cell N=\'Denoise\' V=\'0\'/><Cell N=\'Transparency\' V=\'0\'/><Cell N=\'SelectMode\' V=\'1\'/><Cell N=\'DisplayMode\' V=\'2\'/><Cell N=\'IsDropTarget\' V=\'0\'/><Cell N=\'IsSnapTarget\' V=\'1\'/><Cell N=\'IsTextEditTarget\' V=\'1\'/><Cell N=\'DontMoveChildren\' V=\'0\'/><Cell N=\'ShapePermeableX\' V=\'0\'/><Cell N=\'ShapePermeableY\' V=\'0\'/><Cell N=\'ShapePermeablePlace\' V=\'0\'/><Cell N=\'Relationships\' V=\'0\'/><Cell N=\'ShapeFixedCode\' V=\'0\'/><Cell N=\'ShapePlowCode\' V=\'0\'/><Cell N=\'ShapeRouteStyle\' V=\'0\'/><Cell N=\'ShapePlaceStyle\' V=\'0\'/><Cell N=\'ConFixedCode\' V=\'0\'/><Cell N=\'ConLineJumpCode\' V=\'0\'/><Cell N=\'ConLineJumpStyle\' V=\'0\'/><Cell N=\'ConLineJumpDirX\' V=\'0\'/><Cell N=\'ConLineJumpDirY\' V=\'0\'/><Cell N=\'ShapePlaceFlip\' V=\'0\'/><Cell N=\'ConLineRouteExt\' V=\'0\'/><Cell N=\'ShapeSplit\' V=\'0\'/><Cell N=\'ShapeSplittable\' V=\'0\'/><Cell N=\'DisplayLevel\' V=\'0\'/><Cell N=\'ResizePage\' V=\'0\'/><Cell N=\'EnableGrid\' V=\'0\'/><Cell N=\'DynamicsOff\' V=\'0\'/><Cell N=\'CtrlAsInput\' V=\'0\'/><Cell N=\'AvoidPageBreaks\' V=\'0\'/><Cell N=\'PlaceStyle\' V=\'0\'/><Cell N=\'RouteStyle\' V=\'0\'/><Cell N=\'PlaceDepth\' V=\'0\'/><Cell N=\'PlowCode\' V=\'0\'/><Cell N=\'LineJumpCode\' V=\'1\'/><Cell N=\'LineJumpStyle\' V=\'0\'/><Cell N=\'PageLineJumpDirX\' V=\'0\'/><Cell N=\'PageLineJumpDirY\' V=\'0\'/><Cell N=\'LineToNodeX\' V=\'0.125\'/><Cell N=\'LineToNodeY\' V=\'0.125\'/><Cell N=\'BlockSizeX\' V=\'0.25\'/><Cell N=\'BlockSizeY\' V=\'0.25\'/><Cell N=\'AvenueSizeX\' V=\'0.375\'/><Cell N=\'AvenueSizeY\' V=\'0.375\'/><Cell N=\'LineToLineX\' V=\'0.125\'/><Cell N=\'LineToLineY\' V=\'0.125\'/><Cell N=\'LineJumpFactorX\' V=\'0.66666666666667\'/><Cell N=\'LineJumpFactorY\' V=\'0.66666666666667\'/><Cell N=\'LineAdjustFrom\' V=\'0\'/><Cell N=\'LineAdjustTo\' V=\'0\'/><Cell N=\'PlaceFlip\' V=\'0\'/><Cell N=\'LineRouteExt\' V=\'0\'/><Cell N=\'PageShapeSplit\' V=\'0\'/><Cell N=\'PageLeftMargin\' V=\'0.25\'/><Cell N=\'PageRightMargin\' V=\'0.25\'/><Cell N=\'PageTopMargin\' V=\'0.25\'/><Cell N=\'PageBottomMargin\' V=\'0.25\'/><Cell N=\'ScaleX\' V=\'1\'/><Cell N=\'ScaleY\' V=\'1\'/><Cell N=\'PagesX\' V=\'1\'/><Cell N=\'PagesY\' V=\'1\'/><Cell N=\'CenterX\' V=\'0\'/><Cell N=\'CenterY\' V=\'0\'/><Cell N=\'OnPage\' V=\'0\'/><Cell N=\'PrintGrid\' V=\'0\'/><Cell N=\'PrintPageOrientation\' V=\'1\'/><Cell N=\'PaperKind\' V=\'1\'/><Cell N=\'PaperSource\' V=\'7\'/><Cell N=\'QuickStyleLineColor\' V=\'100\'/><Cell N=\'QuickStyleFillColor\' V=\'100\'/><Cell N=\'QuickStyleShadowColor\' V=\'100\'/><Cell N=\'QuickStyleFontColor\' V=\'100\'/><Cell N=\'QuickStyleLineMatrix\' V=\'100\'/><Cell N=\'QuickStyleFillMatrix\' V=\'100\'/><Cell N=\'QuickStyleEffectsMatrix\' V=\'100\'/><Cell N=\'QuickStyleFontMatrix\' V=\'100\'/><Cell N=\'QuickStyleType\' V=\'0\'/><Cell N=\'QuickStyleVariation\' V=\'0\'/><Cell N=\'LineGradientDir\' V=\'0\'/><Cell N=\'LineGradientAngle\' V=\'1.5707963267949\'/><Cell N=\'FillGradientDir\' V=\'0\'/><Cell N=\'FillGradientAngle\' V=\'1.5707963267949\'/><Cell N=\'LineGradientEnabled\' V=\'0\'/><Cell N=\'FillGradientEnabled\' V=\'0\'/><Cell N=\'RotateGradientWithShape\' V=\'1\'/><Cell N=\'UseGroupGradient\' V=\'0\'/><Cell N=\'BevelTopType\' V=\'0\'/><Cell N=\'BevelTopWidth\' V=\'0\'/><Cell N=\'BevelTopHeight\' V=\'0\'/><Cell N=\'BevelBottomType\' V=\'0\'/><Cell N=\'BevelBottomWidth\' V=\'0\'/><Cell N=\'BevelBottomHeight\' V=\'0\'/><Cell N=\'BevelDepthColor\' V=\'1\'/><Cell N=\'BevelDepthSize\' V=\'0\'/><Cell N=\'BevelContourColor\' V=\'0\'/><Cell N=\'BevelContourSize\' V=\'0\'/><Cell N=\'BevelMaterialType\' V=\'0\'/><Cell N=\'BevelLightingType\' V=\'0\'/><Cell N=\'BevelLightingAngle\' V=\'0\'/><Cell N=\'RotationXAngle\' V=\'0\'/><Cell N=\'RotationYAngle\' V=\'0\'/><Cell N=\'RotationZAngle\' V=\'0\'/><Cell N=\'RotationType\' V=\'0\'/><Cell N=\'Perspective\' V=\'0\'/><Cell N=\'DistanceFromGround\' V=\'0\'/><Cell N=\'KeepTextFlat\' V=\'0\'/><Cell N=\'ReflectionTrans\' V=\'0\'/><Cell N=\'ReflectionSize\' V=\'0\'/><Cell N=\'ReflectionDist\' V=\'0\'/><Cell N=\'ReflectionBlur\' V=\'0\'/><Cell N=\'GlowColor\' V=\'1\'/><Cell N=\'GlowColorTrans\' V=\'0\'/><Cell N=\'GlowSize\' V=\'0\'/><Cell N=\'SoftEdgesSize\' V=\'0\'/><Cell N=\'SketchSeed\' V=\'0\'/><Cell N=\'SketchEnabled\' V=\'0\'/><Cell N=\'SketchAmount\' V=\'5\'/><Cell N=\'SketchLineWeight\' V=\'0.04166666666666666\' U=\'PT\'/><Cell N=\'SketchLineChange\' V=\'0.14\'/><Cell N=\'SketchFillChange\' V=\'0.1\'/><Cell N=\'ColorSchemeIndex\' V=\'0\'/><Cell N=\'EffectSchemeIndex\' V=\'0\'/><Cell N=\'ConnectorSchemeIndex\' V=\'0\'/><Cell N=\'FontSchemeIndex\' V=\'0\'/><Cell N=\'ThemeIndex\' V=\'0\'/><Cell N=\'VariationColorIndex\' V=\'0\'/><Cell N=\'VariationStyleIndex\' V=\'0\'/><Cell N=\'EmbellishmentIndex\' V=\'0\'/><Cell N=\'ReplaceLockShapeData\' V=\'0\'/><Cell N=\'ReplaceLockText\' V=\'0\'/><Cell N=\'ReplaceLockFormat\' V=\'0\'/><Cell N=\'ReplaceCopyCells\' V=\'0\' U=\'BOOL\' F=\'No Formula\'/><Cell N=\'PageWidth\' V=\'0\' F=\'No Formula\'/><Cell N=\'PageHeight\' V=\'0\' F=\'No Formula\'/><Cell N=\'ShdwOffsetX\' V=\'0\' F=\'No Formula\'/><Cell N=\'ShdwOffsetY\' V=\'0\' F=\'No Formula\'/><Cell N=\'PageScale\' V=\'0\' U=\'IN_F\' F=\'No Formula\'/><Cell N=\'DrawingScale\' V=\'0\' U=\'IN_F\' F=\'No Formula\'/><Cell N=\'DrawingSizeType\' V=\'0\' F=\'No Formula\'/><Cell N=\'DrawingScaleType\' V=\'0\' F=\'No Formula\'/><Cell N=\'InhibitSnap\' V=\'0\' F=\'No Formula\'/><Cell N=\'PageLockReplace\' V=\'0\' U=\'BOOL\' F=\'No Formula\'/><Cell N=\'PageLockDuplicate\' V=\'0\' U=\'BOOL\' F=\'No Formula\'/><Cell N=\'UIVisibility\' V=\'0\' F=\'No Formula\'/><Cell N=\'ShdwType\' V=\'0\' F=\'No Formula\'/><Cell N=\'ShdwObliqueAngle\' V=\'0\' F=\'No Formula\'/><Cell N=\'ShdwScaleFactor\' V=\'0\' F=\'No Formula\'/><Cell N=\'DrawingResizeType\' V=\'0\' F=\'No Formula\'/><Section N=\'Character\'><Row IX=\'0\'><Cell N=\'Font\' V=\'Calibri\'/><Cell N=\'Color\' V=\'0\'/><Cell N=\'Style\' V=\'0\'/><Cell N=\'Case\' V=\'0\'/><Cell N=\'Pos\' V=\'0\'/><Cell N=\'FontScale\' V=\'1\'/><Cell N=\'Size\' V=\'0.1666666666666667\'/><Cell N=\'DblUnderline\' V=\'0\'/><Cell N=\'Overline\' V=\'0\'/><Cell N=\'Strikethru\' V=\'0\'/><Cell N=\'DoubleStrikethrough\' V=\'0\'/><Cell N=\'Letterspace\' V=\'0\'/><Cell N=\'ColorTrans\' V=\'0\'/><Cell N=\'AsianFont\' V=\'0\'/><Cell N=\'ComplexScriptFont\' V=\'0\'/><Cell N=\'ComplexScriptSize\' V=\'-1\'/><Cell N=\'LangID\' V=\'en-US\'/></Row></Section><Section N=\'Paragraph\'><Row IX=\'0\'><Cell N=\'IndFirst\' V=\'0\'/><Cell N=\'IndLeft\' V=\'0\'/><Cell N=\'IndRight\' V=\'0\'/><Cell N=\'SpLine\' V=\'-1.2\'/><Cell N=\'SpBefore\' V=\'0\'/><Cell N=\'SpAfter\' V=\'0\'/><Cell N=\'HorzAlign\' V=\'1\'/><Cell N=\'Bullet\' V=\'0\'/><Cell N=\'BulletStr\' V=\'\'/><Cell N=\'BulletFont\' V=\'0\'/><Cell N=\'BulletFontSize\' V=\'-1\'/><Cell N=\'TextPosAfterBullet\' V=\'0\'/><Cell N=\'Flags\' V=\'0\'/></Row></Section><Section N=\'Tabs\'><Row IX=\'0\'/></Section><Section N=\'LineGradient\'><Row IX=\'0\'><Cell N=\'GradientStopColor\' V=\'1\'/><Cell N=\'GradientStopColorTrans\' V=\'0\'/><Cell N=\'GradientStopPosition\' V=\'0\'/></Row></Section><Section N=\'FillGradient\'><Row IX=\'0\'><Cell N=\'GradientStopColor\' V=\'1\'/><Cell N=\'GradientStopColorTrans\' V=\'0\'/><Cell N=\'GradientStopPosition\' V=\'0\'/></Row></Section></StyleSheet><StyleSheet ID=\'1\' NameU=\'Text Only\' IsCustomNameU=\'1\' Name=\'Text Only\' IsCustomName=\'1\' LineStyle=\'3\' FillStyle=\'3\' TextStyle=\'3\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LineWeight\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineColor\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LinePattern\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Rounding\' V=\'Themed\' F=\'Inh\'/><Cell N=\'EndArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'BeginArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'EndArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineCap\' V=\'Themed\' F=\'Inh\'/><Cell N=\'BeginArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'LineColorTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'CompoundType\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillForegnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillBkgnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillPattern\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwForegnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwPattern\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillForegndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillBkgndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwForegndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwType\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwOffsetX\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwOffsetY\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwObliqueAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwScaleFactor\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwBlur\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwShow\' V=\'0\' F=\'Inh\'/><Cell N=\'LeftMargin\' V=\'0\'/><Cell N=\'RightMargin\' V=\'0\'/><Cell N=\'TopMargin\' V=\'0\'/><Cell N=\'BottomMargin\' V=\'0\'/><Cell N=\'VerticalAlign\' V=\'0\'/><Cell N=\'TextBkgnd\' V=\'0\'/><Cell N=\'DefaultTabStop\' V=\'0.5\' F=\'Inh\'/><Cell N=\'TextDirection\' V=\'0\' F=\'Inh\'/><Cell N=\'TextBkgndTrans\' V=\'0\' F=\'Inh\'/><Cell N=\'LineGradientDir\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineGradientAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientDir\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineGradientEnabled\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientEnabled\' V=\'Themed\' F=\'Inh\'/><Cell N=\'RotateGradientWithShape\' V=\'Themed\' F=\'Inh\'/><Cell N=\'UseGroupGradient\' V=\'Themed\' F=\'Inh\'/><Section N=\'Paragraph\'><Row IX=\'0\'><Cell N=\'IndFirst\' V=\'0\' F=\'Inh\'/><Cell N=\'IndLeft\' V=\'0\' F=\'Inh\'/><Cell N=\'IndRight\' V=\'0\' F=\'Inh\'/><Cell N=\'SpLine\' V=\'-1.2\' F=\'Inh\'/><Cell N=\'SpBefore\' V=\'0\' F=\'Inh\'/><Cell N=\'SpAfter\' V=\'0\' F=\'Inh\'/><Cell N=\'HorzAlign\' V=\'0\'/><Cell N=\'Bullet\' V=\'0\' F=\'Inh\'/><Cell N=\'BulletStr\' V=\'\' F=\'Inh\'/><Cell N=\'BulletFont\' V=\'0\' F=\'Inh\'/><Cell N=\'BulletFontSize\' V=\'-1\' F=\'Inh\'/><Cell N=\'TextPosAfterBullet\' V=\'0\' F=\'Inh\'/><Cell N=\'Flags\' V=\'0\' F=\'Inh\'/></Row></Section></StyleSheet><StyleSheet ID=\'2\' NameU=\'None\' IsCustomNameU=\'1\' Name=\'None\' IsCustomName=\'1\' LineStyle=\'3\' FillStyle=\'3\' TextStyle=\'3\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LineWeight\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineColor\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LinePattern\' V=\'0\'/><Cell N=\'Rounding\' V=\'Themed\' F=\'Inh\'/><Cell N=\'EndArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'BeginArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'EndArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineCap\' V=\'Themed\' F=\'Inh\'/><Cell N=\'BeginArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'LineColorTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'CompoundType\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillForegnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillBkgnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillPattern\' V=\'0\'/><Cell N=\'ShdwForegnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwPattern\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillForegndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillBkgndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwForegndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwType\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwOffsetX\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwOffsetY\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwObliqueAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwScaleFactor\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwBlur\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwShow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineGradientDir\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineGradientAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientDir\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineGradientEnabled\' V=\'0\'/><Cell N=\'FillGradientEnabled\' V=\'0\'/><Cell N=\'RotateGradientWithShape\' V=\'Themed\' F=\'Inh\'/><Cell N=\'UseGroupGradient\' V=\'Themed\' F=\'Inh\'/><Cell N=\'QuickStyleLineColor\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleFillColor\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleShadowColor\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleFontColor\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleLineMatrix\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleFillMatrix\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleEffectsMatrix\' V=\'0\' F=\'GUARD(0)\'/><Cell N=\'QuickStyleFontMatrix\' V=\'100\' F=\'Inh\'/><Cell N=\'QuickStyleType\' V=\'0\' F=\'Inh\'/><Cell N=\'QuickStyleVariation\' V=\'2\'/></StyleSheet><StyleSheet ID=\'3\' NameU=\'Normal\' IsCustomNameU=\'1\' Name=\'Normal\' IsCustomName=\'1\' LineStyle=\'6\' FillStyle=\'6\' TextStyle=\'6\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LeftMargin\' V=\'0.05555555555555555\' U=\'PT\'/><Cell N=\'RightMargin\' V=\'0.05555555555555555\' U=\'PT\'/><Cell N=\'TopMargin\' V=\'0.05555555555555555\' U=\'PT\'/><Cell N=\'BottomMargin\' V=\'0.05555555555555555\' U=\'PT\'/><Cell N=\'VerticalAlign\' V=\'1\' F=\'Inh\'/><Cell N=\'TextBkgnd\' V=\'0\' F=\'Inh\'/><Cell N=\'DefaultTabStop\' V=\'0.5\' F=\'Inh\'/><Cell N=\'TextDirection\' V=\'0\' F=\'Inh\'/><Cell N=\'TextBkgndTrans\' V=\'0\' F=\'Inh\'/></StyleSheet><StyleSheet ID=\'4\' NameU=\'Guide\' IsCustomNameU=\'1\' Name=\'Guide\' IsCustomName=\'1\' LineStyle=\'3\' FillStyle=\'3\' TextStyle=\'3\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LineWeight\' V=\'0\' U=\'PT\'/><Cell N=\'LineColor\' V=\'#7f7f7f\'/><Cell N=\'LinePattern\' V=\'23\'/><Cell N=\'Rounding\' V=\'Themed\' F=\'Inh\'/><Cell N=\'EndArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'BeginArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'EndArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineCap\' V=\'Themed\' F=\'Inh\'/><Cell N=\'BeginArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'LineColorTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'CompoundType\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillForegnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillBkgnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillPattern\' V=\'0\'/><Cell N=\'ShdwForegnd\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwPattern\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillForegndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillBkgndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShdwForegndTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwType\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwOffsetX\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwOffsetY\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwObliqueAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwScaleFactor\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwBlur\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ShapeShdwShow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineGradientDir\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineGradientAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientDir\' V=\'Themed\' F=\'Inh\'/><Cell N=\'FillGradientAngle\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineGradientEnabled\' V=\'0\'/><Cell N=\'FillGradientEnabled\' V=\'0\'/><Cell N=\'RotateGradientWithShape\' V=\'Themed\' F=\'Inh\'/><Cell N=\'UseGroupGradient\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LeftMargin\' V=\'0.05555555555555555\' U=\'PT\' F=\'Inh\'/><Cell N=\'RightMargin\' V=\'0.05555555555555555\' U=\'PT\' F=\'Inh\'/><Cell N=\'TopMargin\' V=\'0\'/><Cell N=\'BottomMargin\' V=\'0\'/><Cell N=\'VerticalAlign\' V=\'2\'/><Cell N=\'TextBkgnd\' V=\'0\' F=\'Inh\'/><Cell N=\'DefaultTabStop\' V=\'0.5\' F=\'Inh\'/><Cell N=\'TextDirection\' V=\'0\' F=\'Inh\'/><Cell N=\'TextBkgndTrans\' V=\'0\' F=\'Inh\'/><Cell N=\'NoObjHandles\' V=\'0\' F=\'Inh\'/><Cell N=\'NonPrinting\' V=\'1\'/><Cell N=\'NoCtlHandles\' V=\'0\' F=\'Inh\'/><Cell N=\'NoAlignBox\' V=\'0\' F=\'Inh\'/><Cell N=\'UpdateAlignBox\' V=\'0\' F=\'Inh\'/><Cell N=\'HideText\' V=\'0\' F=\'Inh\'/><Cell N=\'DynFeedback\' V=\'0\' F=\'Inh\'/><Cell N=\'GlueType\' V=\'0\' F=\'Inh\'/><Cell N=\'WalkPreference\' V=\'0\' F=\'Inh\'/><Cell N=\'BegTrigger\' V=\'0\' F=\'No Formula\'/><Cell N=\'EndTrigger\' V=\'0\' F=\'No Formula\'/><Cell N=\'ObjType\' V=\'0\' F=\'Inh\'/><Cell N=\'Comment\' V=\'\' F=\'Inh\'/><Cell N=\'IsDropSource\' V=\'0\' F=\'Inh\'/><Cell N=\'NoLiveDynamics\' V=\'0\' F=\'Inh\'/><Cell N=\'LocalizeMerge\' V=\'0\' F=\'Inh\'/><Cell N=\'NoProofing\' V=\'0\' F=\'Inh\'/><Cell N=\'Calendar\' V=\'0\' F=\'Inh\'/><Cell N=\'LangID\' V=\'en-US\' F=\'Inh\'/><Cell N=\'ShapeKeywords\' V=\'\' F=\'Inh\'/><Cell N=\'DropOnPageScale\' V=\'1\' F=\'Inh\'/><Cell N=\'ShapePermeableX\' V=\'1\'/><Cell N=\'ShapePermeableY\' V=\'1\'/><Cell N=\'ShapePermeablePlace\' V=\'1\'/><Cell N=\'Relationships\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapeFixedCode\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapePlowCode\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapeRouteStyle\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapePlaceStyle\' V=\'0\' F=\'Inh\'/><Cell N=\'ConFixedCode\' V=\'0\' F=\'Inh\'/><Cell N=\'ConLineJumpCode\' V=\'0\' F=\'Inh\'/><Cell N=\'ConLineJumpStyle\' V=\'0\' F=\'Inh\'/><Cell N=\'ConLineJumpDirX\' V=\'0\' F=\'Inh\'/><Cell N=\'ConLineJumpDirY\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapePlaceFlip\' V=\'0\' F=\'Inh\'/><Cell N=\'ConLineRouteExt\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapeSplit\' V=\'0\' F=\'Inh\'/><Cell N=\'ShapeSplittable\' V=\'0\' F=\'Inh\'/><Cell N=\'DisplayLevel\' V=\'0\' F=\'Inh\'/><Section N=\'Character\'><Row IX=\'0\'><Cell N=\'Font\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Color\' V=\'4\'/><Cell N=\'Style\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Case\' V=\'0\' F=\'Inh\'/><Cell N=\'Pos\' V=\'0\' F=\'Inh\'/><Cell N=\'FontScale\' V=\'1\' F=\'Inh\'/><Cell N=\'Size\' V=\'0.125\'/><Cell N=\'DblUnderline\' V=\'0\' F=\'Inh\'/><Cell N=\'Overline\' V=\'0\' F=\'Inh\'/><Cell N=\'Strikethru\' V=\'0\' F=\'Inh\'/><Cell N=\'DoubleStrikethrough\' V=\'0\' F=\'Inh\'/><Cell N=\'Letterspace\' V=\'0\' F=\'Inh\'/><Cell N=\'ColorTrans\' V=\'0\' F=\'Inh\'/><Cell N=\'AsianFont\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ComplexScriptFont\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ComplexScriptSize\' V=\'-1\' F=\'Inh\'/><Cell N=\'LangID\' V=\'en-US\' F=\'Inh\'/></Row></Section></StyleSheet><StyleSheet ID=\'6\' NameU=\'Theme\' IsCustomNameU=\'1\' Name=\'Theme\' IsCustomName=\'1\' LineStyle=\'0\' FillStyle=\'0\' TextStyle=\'0\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LineWeight\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'LineColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'LinePattern\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'Rounding\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'EndArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'BeginArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'EndArrow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineCap\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BeginArrowSize\' V=\'2\' F=\'Inh\'/><Cell N=\'LineColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'CompoundType\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillForegnd\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillBkgnd\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillPattern\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShdwForegnd\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShdwPattern\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillForegndTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillBkgndTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShdwForegndTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwType\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwOffsetX\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwOffsetY\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwObliqueAngle\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwScaleFactor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwBlur\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ShapeShdwShow\' V=\'0\' F=\'Inh\'/><Cell N=\'LineGradientDir\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'LineGradientAngle\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillGradientDir\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillGradientAngle\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'LineGradientEnabled\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'FillGradientEnabled\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'RotateGradientWithShape\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'UseGroupGradient\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelTopType\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelTopWidth\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelTopHeight\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelBottomType\' V=\'0\' F=\'Inh\'/><Cell N=\'BevelBottomWidth\' V=\'0\' F=\'Inh\'/><Cell N=\'BevelBottomHeight\' V=\'0\' F=\'Inh\'/><Cell N=\'BevelDepthColor\' V=\'1\' F=\'Inh\'/><Cell N=\'BevelDepthSize\' V=\'0\' F=\'Inh\'/><Cell N=\'BevelContourColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelContourSize\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelMaterialType\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelLightingType\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BevelLightingAngle\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ReflectionTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ReflectionSize\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ReflectionDist\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ReflectionBlur\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GlowColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GlowColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GlowSize\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'SoftEdgesSize\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'SketchSeed\' V=\'0\' F=\'Inh\'/><Cell N=\'SketchEnabled\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'SketchAmount\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'SketchLineWeight\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'SketchLineChange\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'SketchFillChange\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'QuickStyleLineColor\' V=\'100\'/><Cell N=\'QuickStyleFillColor\' V=\'100\'/><Cell N=\'QuickStyleShadowColor\' V=\'100\'/><Cell N=\'QuickStyleFontColor\' V=\'100\'/><Cell N=\'QuickStyleLineMatrix\' V=\'100\'/><Cell N=\'QuickStyleFillMatrix\' V=\'100\'/><Cell N=\'QuickStyleEffectsMatrix\' V=\'100\'/><Cell N=\'QuickStyleFontMatrix\' V=\'100\'/><Cell N=\'QuickStyleType\' V=\'0\' F=\'Inh\'/><Cell N=\'QuickStyleVariation\' V=\'0\' F=\'Inh\'/><Cell N=\'ColorSchemeIndex\' V=\'65534\'/><Cell N=\'EffectSchemeIndex\' V=\'65534\'/><Cell N=\'ConnectorSchemeIndex\' V=\'65534\'/><Cell N=\'FontSchemeIndex\' V=\'65534\'/><Cell N=\'ThemeIndex\' V=\'65534\'/><Cell N=\'VariationColorIndex\' V=\'65534\'/><Cell N=\'VariationStyleIndex\' V=\'65534\'/><Cell N=\'EmbellishmentIndex\' V=\'65534\'/><Section N=\'Character\'><Row IX=\'0\'><Cell N=\'Font\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'Color\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'Style\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'Case\' V=\'0\' F=\'Inh\'/><Cell N=\'Pos\' V=\'0\' F=\'Inh\'/><Cell N=\'FontScale\' V=\'1\' F=\'Inh\'/><Cell N=\'Size\' V=\'0.1666666666666667\' F=\'Inh\'/><Cell N=\'DblUnderline\' V=\'0\' F=\'Inh\'/><Cell N=\'Overline\' V=\'0\' F=\'Inh\'/><Cell N=\'Strikethru\' V=\'0\' F=\'Inh\'/><Cell N=\'DoubleStrikethrough\' V=\'0\' F=\'Inh\'/><Cell N=\'Letterspace\' V=\'0\' F=\'Inh\'/><Cell N=\'ColorTrans\' V=\'0\' F=\'Inh\'/><Cell N=\'AsianFont\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ComplexScriptFont\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'ComplexScriptSize\' V=\'-1\' F=\'Inh\'/><Cell N=\'LangID\' V=\'en-US\' F=\'Inh\'/></Row></Section><Section N=\'FillGradient\'><Row IX=\'0\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'1\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'2\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'3\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'4\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'5\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'6\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'7\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'8\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'9\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row></Section><Section N=\'LineGradient\'><Row IX=\'0\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'1\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'2\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'3\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'4\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'5\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'6\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'7\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'8\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row><Row IX=\'9\'><Cell N=\'GradientStopColor\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopColorTrans\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'GradientStopPosition\' V=\'Themed\' F=\'THEMEVAL()\'/></Row></Section></StyleSheet><StyleSheet ID=\'7\' NameU=\'Connector\' IsCustomNameU=\'1\' Name=\'Connector\' IsCustomName=\'1\' LineStyle=\'3\' FillStyle=\'3\' TextStyle=\'3\'><Cell N=\'EnableLineProps\' V=\'1\'/><Cell N=\'EnableFillProps\' V=\'1\'/><Cell N=\'EnableTextProps\' V=\'1\'/><Cell N=\'HideForApply\' V=\'0\'/><Cell N=\'LeftMargin\' V=\'0.05555555555555555\' U=\'PT\' F=\'Inh\'/><Cell N=\'RightMargin\' V=\'0.05555555555555555\' U=\'PT\' F=\'Inh\'/><Cell N=\'TopMargin\' V=\'0.05555555555555555\' U=\'PT\' F=\'Inh\'/><Cell N=\'BottomMargin\' V=\'0.05555555555555555\' U=\'PT\' F=\'Inh\'/><Cell N=\'VerticalAlign\' V=\'1\' F=\'Inh\'/><Cell N=\'TextBkgnd\' V=\'#ffffff\' F=\'THEMEGUARD(THEMEVAL("BackgroundColor")+1)\'/><Cell N=\'DefaultTabStop\' V=\'0.5\' F=\'Inh\'/><Cell N=\'TextDirection\' V=\'0\' F=\'Inh\'/><Cell N=\'TextBkgndTrans\' V=\'0\' F=\'Inh\'/><Cell N=\'NoObjHandles\' V=\'0\' F=\'Inh\'/><Cell N=\'NonPrinting\' V=\'0\' F=\'Inh\'/><Cell N=\'NoCtlHandles\' V=\'0\' F=\'Inh\'/><Cell N=\'NoAlignBox\' V=\'0\' F=\'Inh\'/><Cell N=\'UpdateAlignBox\' V=\'0\' F=\'Inh\'/><Cell N=\'HideText\' V=\'0\' F=\'Inh\'/><Cell N=\'DynFeedback\' V=\'0\' F=\'Inh\'/><Cell N=\'GlueType\' V=\'0\' F=\'Inh\'/><Cell N=\'WalkPreference\' V=\'0\' F=\'Inh\'/><Cell N=\'BegTrigger\' V=\'0\' F=\'No Formula\'/><Cell N=\'EndTrigger\' V=\'0\' F=\'No Formula\'/><Cell N=\'ObjType\' V=\'0\' F=\'Inh\'/><Cell N=\'Comment\' V=\'\' F=\'Inh\'/><Cell N=\'IsDropSource\' V=\'0\' F=\'Inh\'/><Cell N=\'NoLiveDynamics\' V=\'0\' F=\'Inh\'/><Cell N=\'LocalizeMerge\' V=\'0\' F=\'Inh\'/><Cell N=\'NoProofing\' V=\'0\' F=\'Inh\'/><Cell N=\'Calendar\' V=\'0\' F=\'Inh\'/><Cell N=\'LangID\' V=\'en-US\' F=\'Inh\'/><Cell N=\'ShapeKeywords\' V=\'\' F=\'Inh\'/><Cell N=\'DropOnPageScale\' V=\'1\' F=\'Inh\'/><Cell N=\'QuickStyleLineColor\' V=\'100\'/><Cell N=\'QuickStyleFillColor\' V=\'100\'/><Cell N=\'QuickStyleShadowColor\' V=\'100\'/><Cell N=\'QuickStyleFontColor\' V=\'100\'/><Cell N=\'QuickStyleLineMatrix\' V=\'1\'/><Cell N=\'QuickStyleFillMatrix\' V=\'1\'/><Cell N=\'QuickStyleEffectsMatrix\' V=\'1\'/><Cell N=\'QuickStyleFontMatrix\' V=\'1\'/><Cell N=\'QuickStyleType\' V=\'0\'/><Cell N=\'QuickStyleVariation\' V=\'0\'/><Cell N=\'LineWeight\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LineColor\' V=\'Themed\' F=\'Inh\'/><Cell N=\'LinePattern\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Rounding\' V=\'Themed\' F=\'Inh\'/><Cell N=\'EndArrowSize\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'BeginArrow\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'EndArrow\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'LineCap\' V=\'Themed\' F=\'Inh\'/><Cell N=\'BeginArrowSize\' V=\'Themed\' F=\'THEMEVAL()\'/><Cell N=\'LineColorTrans\' V=\'Themed\' F=\'Inh\'/><Cell N=\'CompoundType\' V=\'Themed\' F=\'Inh\'/><Section N=\'Character\'><Row IX=\'0\'><Cell N=\'Font\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Color\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Style\' V=\'Themed\' F=\'Inh\'/><Cell N=\'Case\' V=\'0\' F=\'Inh\'/><Cell N=\'Pos\' V=\'0\' F=\'Inh\'/><Cell N=\'FontScale\' V=\'1\' F=\'Inh\'/><Cell N=\'Size\' V=\'0.1111111111111111\'/><Cell N=\'DblUnderline\' V=\'0\' F=\'Inh\'/><Cell N=\'Overline\' V=\'0\' F=\'Inh\'/><Cell N=\'Strikethru\' V=\'0\' F=\'Inh\'/><Cell N=\'DoubleStrikethrough\' V=\'0\' F=\'Inh\'/><Cell N=\'Letterspace\' V=\'0\' F=\'Inh\'/><Cell N=\'ColorTrans\' V=\'0\' F=\'Inh\'/><Cell N=\'AsianFont\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ComplexScriptFont\' V=\'Themed\' F=\'Inh\'/><Cell N=\'ComplexScriptSize\' V=\'-1\' F=\'Inh\'/><Cell N=\'LangID\' V=\'en-US\' F=\'Inh\'/></Row></Section></StyleSheet></StyleSheets><DocumentSheet NameU=\'TheDoc\' IsCustomNameU=\'1\' Name=\'TheDoc\' IsCustomName=\'1\' LineStyle=\'0\' FillStyle=\'0\' TextStyle=\'0\'><Cell N=\'OutputFormat\' V=\'0\'/><Cell N=\'LockPreview\' V=\'0\'/><Cell N=\'AddMarkup\' V=\'0\'/><Cell N=\'ViewMarkup\' V=\'0\'/><Cell N=\'DocLockReplace\' V=\'0\' U=\'BOOL\'/><Cell N=\'NoCoauth\' V=\'0\' U=\'BOOL\'/><Cell N=\'DocLockDuplicatePage\' V=\'0\' U=\'BOOL\'/><Cell N=\'PreviewQuality\' V=\'0\'/><Cell N=\'PreviewScope\' V=\'0\'/><Cell N=\'DocLangID\' V=\'en-US\'/><Section N=\'User\'><Row N=\'msvNoAutoConnect\'><Cell N=\'Value\' V=\'1\'/><Cell N=\'Prompt\' V=\'\' F=\'No Formula\'/></Row></Section></DocumentSheet></VisioDocument>',
            'visio/windows.xml' : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Windows ClientWidth=\'0\' ClientHeight=\'0\' xmlns=\'http://schemas.microsoft.com/office/visio/2012/main\' xmlns:r=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships\' xml:space=\'preserve\' />',
            'visio/_rels/document.xml.rels' : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns=\'http://schemas.openxmlformats.org/package/2006/relationships\'><Relationship Id=\'rId1\' Type=\'http://schemas.microsoft.com/visio/2010/relationships/masters\' Target=\'masters/masters.xml\' /><Relationship Id=\'rId2\' Type=\'http://schemas.microsoft.com/visio/2010/relationships/pages\' Target=\'pages/pages.xml\' /><Relationship Id=\'rId3\' Type=\'http://schemas.microsoft.com/visio/2010/relationships/windows\' Target=\'windows.xml\' /></Relationships>',
            'visio/masters/_rels/masters.xml.rels' : '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.microsoft.com/visio/2010/relationships/master" Target="master1.xml"/></Relationships>',
            'visio/masters/masters.xml' : '<?xml version=\'1.0\' encoding=\'utf-8\' ?><Masters xmlns=\'http://schemas.microsoft.com/office/visio/2012/main\' xmlns:r=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships\' xml:space=\'preserve\'><Master ID=\'4\' NameU=\'Dynamic connector\' IsCustomNameU=\'1\' Name=\'Dynamic connector\' IsCustomName=\'1\' Prompt=\'This connector automatically routes between the shapes it connects.\' IconSize=\'1\' AlignName=\'2\' MatchByName=\'1\' IconUpdate=\'0\' UniqueID=\'{002A9108-0000-0000-8E40-00608CF305B2}\' BaseID=\'{F7290A45-E3AD-11D2-AE4F-006008C9F5A9}\' PatternFlags=\'0\' Hidden=\'0\' MasterType=\'0\'><PageSheet LineStyle=\'0\' FillStyle=\'0\' TextStyle=\'0\'><Cell N=\'PageWidth\' V=\'3\'/><Cell N=\'PageHeight\' V=\'3\'/><Cell N=\'ShdwOffsetX\' V=\'0.125\'/><Cell N=\'ShdwOffsetY\' V=\'-0.125\'/><Cell N=\'PageScale\' V=\'1\' U=\'IN_F\'/><Cell N=\'DrawingScale\' V=\'1\' U=\'IN_F\'/><Cell N=\'DrawingSizeType\' V=\'4\'/><Cell N=\'DrawingScaleType\' V=\'0\'/><Cell N=\'InhibitSnap\' V=\'0\'/><Cell N=\'PageLockReplace\' V=\'0\' U=\'BOOL\'/><Cell N=\'PageLockDuplicate\' V=\'0\' U=\'BOOL\'/><Cell N=\'UIVisibility\' V=\'0\'/><Cell N=\'ShdwType\' V=\'0\'/><Cell N=\'ShdwObliqueAngle\' V=\'0\'/><Cell N=\'ShdwScaleFactor\' V=\'1\'/><Cell N=\'DrawingResizeType\' V=\'0\'/><Section N=\'Layer\'><Row IX=\'0\'><Cell N=\'Name\' V=\'Connector\'/><Cell N=\'Color\' V=\'255\'/><Cell N=\'Status\' V=\'0\'/><Cell N=\'Visible\' V=\'1\'/><Cell N=\'Print\' V=\'1\'/><Cell N=\'Active\' V=\'0\'/><Cell N=\'Lock\' V=\'0\'/><Cell N=\'Snap\' V=\'1\'/><Cell N=\'Glue\' V=\'1\'/><Cell N=\'NameUniv\' V=\'Connector\'/><Cell N=\'ColorTrans\' V=\'0\'/></Row></Section></PageSheet><Rel r:id=\'rId1\'/></Master><Master ID=\'2\' NameU=\'Cylinder\' IsCustomNameU=\'1\' Name=\'Cylinder\' IsCustomName=\'1\' Prompt=\'Drag onto the page, then use the yellow squares to modify the shape.\' IconSize=\'1\' AlignName=\'2\' MatchByName=\'0\' IconUpdate=\'1\' UniqueID=\'{088414F3-000E-0000-8E40-00608CF305B2}\' BaseID=\'{64C4C121-D72A-49B3-A83F-9C924B7FEAFA}\' PatternFlags=\'0\' Hidden=\'0\' MasterType=\'2\'><PageSheet LineStyle=\'0\' FillStyle=\'0\' TextStyle=\'0\'><Cell N=\'PageWidth\' V=\'3.937007874015748\' U=\'MM\'/><Cell N=\'PageHeight\' V=\'3.937007874015748\' U=\'MM\'/><Cell N=\'ShdwOffsetX\' V=\'0.1181102362204724\'/><Cell N=\'ShdwOffsetY\' V=\'-0.1181102362204724\'/><Cell N=\'PageScale\' V=\'0.03937007874015748\' U=\'MM\'/><Cell N=\'DrawingScale\' V=\'0.03937007874015748\' U=\'MM\'/><Cell N=\'DrawingSizeType\' V=\'0\'/><Cell N=\'DrawingScaleType\' V=\'0\'/><Cell N=\'InhibitSnap\' V=\'0\'/><Cell N=\'PageLockReplace\' V=\'0\' U=\'BOOL\'/><Cell N=\'PageLockDuplicate\' V=\'0\' U=\'BOOL\'/><Cell N=\'UIVisibility\' V=\'0\'/><Cell N=\'ShdwType\' V=\'0\'/><Cell N=\'ShdwObliqueAngle\' V=\'0\'/><Cell N=\'ShdwScaleFactor\' V=\'1\'/><Cell N=\'DrawingResizeType\' V=\'1\'/><Cell N=\'ShapeKeywords\' V=\'basic,shape,geometry,cylinder,3d,perspective\'/></PageSheet><Icon>\n' +
            'AAABAAEAICAQewAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAA\n' +
            'AAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/w\n' +
            'D/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAd3d3d3d3AAAAAAAAAHj/////////////iAA\n' +
            'AAI//////////////////AAD//////////////////3AA//////////////////9wAP//////////\n' +
            '////////cAD//////////////////3AA//////////////////9wAP//////////////////cAD//\n' +
            '////////////////3AA//////////////////9wAP//////////////////cAD///////////////\n' +
            '///3AA//////////////////9wAP//////////////////cAD//////////////////3AA///////\n' +
            '///////////9wAP//////////////////cAD//////////////////3AA//////////////////9w\n' +
            'AP//////////////////cAD//////////////////3AA//////////////////9wAP//+Ih3d3AHd\n' +
            '3eIj///cAD4cAADd3eIiHd3cAAHj3AAA4j/////////////iHAwAP//////////////////AAB///\n' +
            '//////////////+AAAAAeI//////////+IcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n' +
            'AAAD/////+AAAH8AAAAuAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAA\n' +
            'AcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAYAAAAGAAAABg\n' +
            'AAAAeAAAAf+AAB//////w==</Icon><Rel r:id=\'rId2\'/></Master></Masters>',
            'visio/masters/master1.xml' : '<?xml version=\'1.0\' encoding=\'utf-8\' ?><MasterContents xmlns=\'http://schemas.microsoft.com/office/visio/2012/main\' xmlns:r=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships\' xml:space=\'preserve\'><Shapes><Shape ID=\'5\' OriginalID=\'0\' Type=\'Shape\' LineStyle=\'7\' FillStyle=\'7\' TextStyle=\'7\'><Cell N=\'PinX\' V=\'1.5\' F=\'GUARD((BeginX+EndX)/2)\'/><Cell N=\'PinY\' V=\'1.5\' F=\'GUARD((BeginY+EndY)/2)\'/><Cell N=\'Width\' V=\'1\' F=\'GUARD(EndX-BeginX)\'/><Cell N=\'Height\' V=\'-1\' F=\'GUARD(EndY-BeginY)\'/><Cell N=\'LocPinX\' V=\'0.5\' F=\'GUARD(Width*0.5)\'/><Cell N=\'LocPinY\' V=\'-0.5\' F=\'GUARD(Height*0.5)\'/><Cell N=\'Angle\' V=\'0\' F=\'GUARD(0DA)\'/><Cell N=\'FlipX\' V=\'0\' F=\'GUARD(FALSE)\'/><Cell N=\'FlipY\' V=\'0\' F=\'GUARD(FALSE)\'/><Cell N=\'ResizeMode\' V=\'0\'/><Cell N=\'BeginX\' V=\'1\'/><Cell N=\'BeginY\' V=\'2\'/><Cell N=\'EndX\' V=\'2\'/><Cell N=\'EndY\' V=\'1\'/><Cell N=\'TxtPinX\' V=\'0\' F=\'SETATREF(Controls.TextPosition)\'/><Cell N=\'TxtPinY\' V=\'-1\' F=\'SETATREF(Controls.TextPosition.Y)\'/><Cell N=\'TxtWidth\' V=\'0.5555555555555556\' F=\'MAX(TEXTWIDTH(TheText),5*Char.Size)\'/><Cell N=\'TxtHeight\' V=\'0.2444444444444444\' F=\'TEXTHEIGHT(TheText,TxtWidth)\'/><Cell N=\'TxtLocPinX\' V=\'0.2777777777777778\' F=\'TxtWidth*0.5\'/><Cell N=\'TxtLocPinY\' V=\'0.1222222222222222\' F=\'TxtHeight*0.5\'/><Cell N=\'TxtAngle\' V=\'0\'/><Cell N=\'LockHeight\' V=\'1\'/><Cell N=\'LockCalcWH\' V=\'1\'/><Cell N=\'HelpTopic\' V=\'Vis_SE.chm!#20000\'/><Cell N=\'Copyright\' V=\'Copyright 2001 Microsoft Corporation.  All rights reserved.\'/><Cell N=\'NoAlignBox\' V=\'1\'/><Cell N=\'DynFeedback\' V=\'2\'/><Cell N=\'GlueType\' V=\'2\'/><Cell N=\'ObjType\' V=\'2\'/><Cell N=\'NoLiveDynamics\' V=\'1\'/><Cell N=\'ShapeSplittable\' V=\'1\'/><Cell N=\'LayerMember\' V=\'0\'/><Section N=\'Control\'><Row N=\'TextPosition\'><Cell N=\'X\' V=\'0\'/><Cell N=\'Y\' V=\'-1\'/><Cell N=\'XDyn\' V=\'0\' F=\'Controls.TextPosition\'/><Cell N=\'YDyn\' V=\'-1\' F=\'Controls.TextPosition.Y\'/><Cell N=\'XCon\' V=\'5\' F=\'IF(OR(STRSAME(SHAPETEXT(TheText),""),HideText),5,0)\'/><Cell N=\'YCon\' V=\'0\'/><Cell N=\'CanGlue\' V=\'0\'/><Cell N=\'Prompt\' V=\'Reposition Text\'/></Row></Section><Section N=\'Geometry\' IX=\'0\'><Cell N=\'NoFill\' V=\'1\'/><Cell N=\'NoLine\' V=\'0\'/><Cell N=\'NoShow\' V=\'0\'/><Cell N=\'NoSnap\' V=\'0\'/><Cell N=\'NoQuickDrag\' V=\'0\'/><Row T=\'MoveTo\' IX=\'1\'><Cell N=\'X\' V=\'0\'/><Cell N=\'Y\' V=\'0\'/></Row><Row T=\'LineTo\' IX=\'2\'><Cell N=\'X\' V=\'0\'/><Cell N=\'Y\' V=\'-1\'/></Row></Section></Shape></Shapes></MasterContents>',
            'visio/masters/master2.xml' : '<?xml version=\'1.0\' encoding=\'utf-8\' ?><MasterContents xmlns=\'http://schemas.microsoft.com/office/visio/2012/main\' xmlns:r=\'http://schemas.openxmlformats.org/officeDocument/2006/relationships\' xml:space=\'preserve\'><Shapes><Shape ID=\'5\' Type=\'Group\' LineStyle=\'3\' FillStyle=\'3\' TextStyle=\'3\'><Cell N=\'PinX\' V=\'1.968503920581397\' U=\'MM\'/><Cell N=\'PinY\' V=\'1.968503920581397\' U=\'MM\'/><Cell N=\'Width\' V=\'1.181102362204724\' U=\'MM\'/><Cell N=\'Height\' V=\'1.181102362204724\' U=\'MM\'/><Cell N=\'LocPinX\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'LocPinY\' V=\'0.5905511811023622\' U=\'MM\' F=\'Height*0.5\'/><Cell N=\'Angle\' V=\'0\'/><Cell N=\'FlipX\' V=\'0\'/><Cell N=\'FlipY\' V=\'0\'/><Cell N=\'ResizeMode\' V=\'0\'/><Cell N=\'SelectMode\' V=\'0\'/><Cell N=\'LineWeight\' V=\'0.003333333333333333\' U=\'PT\' F=\'THEMEVAL("LineWeight",0.24PT)\'/><Cell N=\'QuickStyleType\' V=\'2\'/><Cell N=\'EventDblClick\' V=\'0\' F=\'OPENTEXTWIN()\'/><Cell N=\'ShapeSplit\' V=\'1\'/><Cell N=\'HelpTopic\' V=\'Vis_PRXY.chm!#60312\'/><Cell N=\'Copyright\' V=\'Copyright (c) 2012 Microsoft Corporation.  All rights reserved.\'/><Section N=\'Control\'><Row N=\'Row_1\'><Cell N=\'X\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'Y\' V=\'0.9448818897637795\' U=\'MM\' F=\'BOUND(Height*0.8,0,FALSE,0,Height)\'/><Cell N=\'XDyn\' V=\'0\' U=\'MM\' F=\'Width*0\'/><Cell N=\'YDyn\' V=\'0\' U=\'MM\' F=\'Height*0\'/><Cell N=\'XCon\' V=\'1\'/><Cell N=\'YCon\' V=\'0\'/><Cell N=\'CanGlue\' V=\'0\'/><Cell N=\'Prompt\' V=\'Viewing Angle\'/></Row></Section><Section N=\'Connection\'><Row T=\'Connection\' IX=\'0\'><Cell N=\'X\' V=\'0\' U=\'MM\' F=\'Width*0\'/><Cell N=\'Y\' V=\'0.5905511811023622\' U=\'MM\' F=\'Height*0.5\'/><Cell N=\'DirX\' V=\'0\'/><Cell N=\'DirY\' V=\'0\'/><Cell N=\'Type\' V=\'0\'/><Cell N=\'AutoGen\' V=\'0\'/><Cell N=\'Prompt\' V=\'\' F=\'No Formula\'/></Row><Row T=\'Connection\' IX=\'1\'><Cell N=\'X\' V=\'1.181102362204724\' U=\'MM\' F=\'Width*1\'/><Cell N=\'Y\' V=\'0.5905511811023622\' U=\'MM\' F=\'Height*0.5\'/><Cell N=\'DirX\' V=\'0\'/><Cell N=\'DirY\' V=\'0\'/><Cell N=\'Type\' V=\'0\'/><Cell N=\'AutoGen\' V=\'0\'/><Cell N=\'Prompt\' V=\'\' F=\'No Formula\'/></Row><Row T=\'Connection\' IX=\'2\'><Cell N=\'X\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'Y\' V=\'0\' U=\'MM\' F=\'Height*0\'/><Cell N=\'DirX\' V=\'0\'/><Cell N=\'DirY\' V=\'0\'/><Cell N=\'Type\' V=\'0\'/><Cell N=\'AutoGen\' V=\'0\'/><Cell N=\'Prompt\' V=\'\' F=\'No Formula\'/></Row><Row T=\'Connection\' IX=\'3\'><Cell N=\'X\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'Y\' V=\'1.181102362204724\' U=\'MM\' F=\'Height*1\'/><Cell N=\'DirX\' V=\'0\'/><Cell N=\'DirY\' V=\'0\'/><Cell N=\'Type\' V=\'0\'/><Cell N=\'AutoGen\' V=\'0\'/><Cell N=\'Prompt\' V=\'\' F=\'No Formula\'/></Row><Row T=\'Connection\' IX=\'4\'><Cell N=\'X\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'Y\' V=\'0.9448818897637795\' U=\'MM\' F=\'Controls.Row_1.Y\'/><Cell N=\'DirX\' V=\'0\'/><Cell N=\'DirY\' V=\'0\'/><Cell N=\'Type\' V=\'0\'/><Cell N=\'AutoGen\' V=\'0\'/><Cell N=\'Prompt\' V=\'\' F=\'No Formula\'/></Row></Section><Section N=\'Character\'><Row IX=\'0\'><Cell N=\'Size\' V=\'0.1388888888888889\' U=\'PT\'/></Row></Section><Section N=\'User\'><Row N=\'visVersion\'><Cell N=\'Value\' V=\'15\'/><Cell N=\'Prompt\' V=\'\'/></Row></Section><Section N=\'Geometry\' IX=\'0\'><Cell N=\'NoFill\' V=\'0\'/><Cell N=\'NoLine\' V=\'0\'/><Cell N=\'NoShow\' V=\'0\'/><Cell N=\'NoSnap\' V=\'0\'/><Cell N=\'NoQuickDrag\' V=\'0\'/><Row T=\'Ellipse\' IX=\'1\'><Cell N=\'X\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'Y\' V=\'1.062992125984252\' U=\'MM\' F=\'Height-(Height-Controls.Row_1.Y)*0.5\'/><Cell N=\'A\' V=\'0\' U=\'MM\' F=\'Width*0\'/><Cell N=\'B\' V=\'1.062992125984252\' U=\'MM\' F=\'Geometry1.Y1\'/><Cell N=\'C\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'D\' V=\'1.181102362204724\' U=\'MM\' F=\'Height*1\'/></Row></Section><Shapes><Shape ID=\'6\' Type=\'Shape\' LineStyle=\'3\' FillStyle=\'3\' TextStyle=\'3\'><Cell N=\'PinX\' V=\'0.5905511811023622\' U=\'MM\' F=\'Sheet.5!Width*0.5\'/><Cell N=\'PinY\' V=\'0.5905511811023622\' U=\'MM\' F=\'Sheet.5!Height*0.5\'/><Cell N=\'Width\' V=\'1.181102362204724\' U=\'MM\' F=\'Sheet.5!Width*1\'/><Cell N=\'Height\' V=\'1.181102362204724\' U=\'MM\' F=\'Sheet.5!Height*1\'/><Cell N=\'LocPinX\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'LocPinY\' V=\'0.5905511811023622\' U=\'MM\' F=\'Height*0.5\'/><Cell N=\'Angle\' V=\'0\'/><Cell N=\'FlipX\' V=\'0\'/><Cell N=\'FlipY\' V=\'0\'/><Cell N=\'ResizeMode\' V=\'0\'/><Cell N=\'LineWeight\' V=\'0.003333333333333333\' U=\'PT\' F=\'THEMEVAL("LineWeight",0.24PT)\'/><Cell N=\'Copyright\' V=\'Copyright (c) 2012 Microsoft Corporation.  All rights reserved.\'/><Section N=\'User\'><Row N=\'ControlHalfHeight\'><Cell N=\'Value\' V=\'0.1181102362204724\' U=\'MM\' F=\'(Height-Sheet.5!Controls.Row_1.Y)*0.5\'/><Cell N=\'Prompt\' V=\'\'/></Row><Row N=\'FillForegnd\'><Cell N=\'Value\' V=\'1\' F=\'Sheet.5!FillForegnd\'/><Cell N=\'Prompt\' V=\'\'/></Row></Section><Section N=\'FillGradient\'><Row IX=\'0\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,1),-25))\'/></Row><Row IX=\'1\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,2),-25))\'/></Row><Row IX=\'2\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,3),-25))\'/></Row><Row IX=\'3\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,4),-25))\'/></Row><Row IX=\'4\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,5),-25))\'/></Row><Row IX=\'5\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,6),-25))\'/></Row><Row IX=\'6\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,7),-25))\'/></Row><Row IX=\'7\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,8),-25))\'/></Row><Row IX=\'8\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,9),-25))\'/></Row><Row IX=\'9\'><Cell N=\'GradientStopColor\' V=\'#e4e4e4\' F=\'GUARD(TINT(THEMECBV(User.FillForegnd,10),-25))\'/></Row></Section><Section N=\'Geometry\' IX=\'0\'><Cell N=\'NoFill\' V=\'0\'/><Cell N=\'NoLine\' V=\'0\'/><Cell N=\'NoShow\' V=\'0\'/><Cell N=\'NoSnap\' V=\'0\'/><Cell N=\'NoQuickDrag\' V=\'0\'/><Row T=\'MoveTo\' IX=\'1\'><Cell N=\'X\' V=\'0\' U=\'MM\' F=\'Width*0\'/><Cell N=\'Y\' V=\'0.1181102362204724\' U=\'MM\' F=\'User.ControlHalfHeight\'/></Row><Row T=\'EllipticalArcTo\' IX=\'2\'><Cell N=\'X\' V=\'1.181102362204724\' U=\'MM\' F=\'Width*1\'/><Cell N=\'Y\' V=\'0.1181102362204724\' U=\'MM\' F=\'User.ControlHalfHeight\'/><Cell N=\'A\' V=\'0.5905511811023622\' U=\'MM\' F=\'Width*0.5\'/><Cell N=\'B\' V=\'0\' U=\'MM\' F=\'Height*0\'/><Cell N=\'C\' V=\'0\' U=\'DEG\'/><Cell N=\'D\' V=\'5\' F=\'Width/(User.ControlHalfHeight*2)\'/></Row><Row T=\'LineTo\' IX=\'3\'><Cell N=\'X\' V=\'1.181102362204724\' U=\'MM\' F=\'Width*1\'/><Cell N=\'Y\' V=\'1.062992125984252\' U=\'MM\' F=\'Height-User.ControlHalfHeight\'/></Row><Row T=\'LineTo\' IX=\'4\'><Cell N=\'X\' V=\'0\' U=\'MM\' F=\'Width*0\'/><Cell N=\'Y\' V=\'1.062992125984252\' U=\'MM\' F=\'Height-User.ControlHalfHeight\'/></Row><Row T=\'LineTo\' IX=\'5\'><Cell N=\'X\' V=\'0\' U=\'MM\' F=\'Geometry1.X1\'/><Cell N=\'Y\' V=\'0.1181102362204724\' U=\'MM\' F=\'Geometry1.Y1\'/></Row></Section></Shape></Shapes></Shape></Shapes></MasterContents>'
        };
        for (var id in files) {
            zip.file(id, files[id]);
        }
    }

    function convertMxCell2Shape(cell, graph, xmlDoc, parentHeight, parentGeo, isChild) {
        var geo, vsdxId, shape;
        if (cell.attributes.type !== 'standard.Link') {
            geo = cell.getBBox();
            if (geo != null) {
                if (geo.relative && parentGeo) {
                    geo = geo.clone();
                    geo.x *= parentGeo.width;
                    geo.y *= parentGeo.height;
                    geo.relative = 0;
                }
                geo.fill = cell.attributes.attrs.body.fill;
                geo.stroke = cell.attributes.attrs.body.stroke;
                geo.strokeWidth = cell.attributes.attrs.body.strokeWidth;
                vsdxId = cell.cid.match(/\d+/)[0];
                shape = createShape(vsdxId, geo, xmlDoc, parentHeight, isChild, cell);
                shape.setAttribute('Type', 'Shape');
                return shape;
            }
        } else if (cell.attributes.type === 'standard.Link') {
            var sourceId = cell.attributes.source.id || null;
            var targetId = cell.attributes.target.id || null;
            var startEnd = getLinkStartEnd(sourceId, targetId, graph);
            geo = {};
            geo.stroke = cell.attributes.attrs.line.stroke;
            geo.strokeWidth = cell.attributes.attrs.line.strokeWidth;
            geo.source = startEnd.source;
            geo.target = startEnd.target;
            geo.attrs = startEnd.attrs;
            vsdxId = cell.cid.match(/\d+/)[0];
            shape = createLink(vsdxId, geo, xmlDoc, parentHeight, isChild, cell);
            shape.setAttribute('Type', 'Shape');
            return shape;
        }
    }

    function getLinkStartEnd(sourceId, targetId, graphCells) {
        var source = null;
        var target = null;
        var attrs = {
            source: null,
            target: null
        };
        allCells.forEach(function(cell) {
            source = (!source && cell.id === sourceId) ? cell.cid.match(/\d+/)[0] : source;
            target = (!target && cell.id === targetId) ? cell.cid.match(/\d+/)[0] : target;
            attrs.source = (!attrs.source && cell.id === sourceId) ? cell : attrs.source;
            attrs.target = (!attrs.target && cell.id === targetId) ? cell : attrs.target;
        });
        return { source: source, target: target, attrs: attrs };
    }

    function createShape(id, geo, xmlDoc, parentHeight, isChild, cell) {
        var shape = createElt(xmlDoc, XMLNS, 'Shape');
        var fill = (typeof geo.fill === 'object') ? '#fff' : geo.fill;
        var pinX = (geo.width > geo.x) ? geo.width : geo.x;
        shape.setAttribute('ID', id);
        // shape.setAttribute('Type', 'Shape');
        if (cell.attributes.type !== 'standard.Link') {
            var hw = geo.width/2, hh = geo.height/2;
            shape.setAttribute('NameU', 'Shape.' + id);
            shape.setAttribute('Name', 'Shape.' + id);
            shape.setAttribute('LineStyle', '0');
            shape.setAttribute('FillStyle', '0');
            shape.setAttribute('TextStyle', '0');
            shape.appendChild(createCellElemScaled('PinX', pinX, xmlDoc));
            shape.appendChild(createCellElemScaled('PinY', parentHeight - geo.y - hh, xmlDoc));
            shape.appendChild(createCellElemScaled('Width', geo.width, xmlDoc, '', 'IN'));
            shape.appendChild(createCellElemScaled('Height', geo.height, xmlDoc, '', 'IN'));
            shape.appendChild(createCellElemScaled('LocPinX', hw, xmlDoc));
            shape.appendChild(createCellElemScaled('LocPinY', hh, xmlDoc));
            shape.appendChild(createCellElem('Angle', '0', xmlDoc));
            shape.appendChild(createCellElem('FlipX', '0', xmlDoc));
            shape.appendChild(createCellElem('FlipY', '0', xmlDoc));
            if (fill !== 'none') {
                shape.appendChild(createCellElem('FillForegnd', fill, xmlDoc, ''));
                shape.appendChild(createCellElem('FillBkgnd', fill, xmlDoc, ''));
            } else {
                shape.appendChild(createCellElem('FillPattern', '0', xmlDoc, ''));
            }
            if (geo.stroke === 'none') {
                shape.appendChild(createCellElem('LineWeight', '0', xmlDoc));
                shape.appendChild(createCellElem('LineColor', geo.stroke, xmlDoc, ''));
            } else {
                shape.appendChild(createCellElemScaled('LineWeight', geo.strokeWidth, xmlDoc));
                shape.appendChild(createCellElem('LineColor', geo.stroke, xmlDoc, ''));
            }
            var geoElements = (cell.attributes.type === 'standard.Ellipse') ? GEO_SIMPLE_SHAPES.ellipse : GEO_SIMPLE_SHAPES.rect;
            if (cell.attributes.type === 'standard.Cylinder') {
                geoElements = GEO_SIMPLE_SHAPES.cylinder;
                /*geoElements = [];
                shape.setAttribute('Master', '2');
                shape.setAttribute('Type', 'Group');
                var cylShapes = createElt(xmlDoc, XMLNS, 'Shapes');
                var cylShape = createElt(xmlDoc, XMLNS, 'Shape');
                cylShape.setAttribute('ID', '2');
                cylShape.setAttribute('MasterShape', '6');
                cylShape.setAttribute('Type', 'Shape');
                cylShapes.appendChild(cylShape);
                shape.appendChild(cylShapes);*/
            } else if (cell.attributes.type === 'standard.Path' && cell.geometry) {
                // console.log(cell.geometry);
                // console.log(geoElements);
                geoElements = cell.geometry;
            }
            var hasLine = (geo.stroke === 'none') ? '1' : '0';
            for (var i = 0; i < geoElements.length; i++) {
                var geoSec = createElt(xmlDoc, XMLNS, 'Section');
                var geoRows = getAttribute(geoElements[i], 'name', 'Row') || [];
                var noFill = (cell.attributes.type === 'standard.Cylinder' && i > 0) ? 0 : 1;
                if (cell.attributes.type === 'standard.Ellipse') {
                    geoRows[0].elements[0].attributes.V = hw / 100;
                    geoRows[0].elements[1].attributes.V = hh / 100;
                    geoRows[0].elements[2].attributes.V = geo.width / 100;
                    geoRows[0].elements[3].attributes.V = hh / 100;
                    geoRows[0].elements[4].attributes.V = hw / 100;
                    geoRows[0].elements[5].attributes.V = geo.height / 100;
                }
                geoSec.setAttribute('N', 'Geometry');
                geoSec.setAttribute('IX', i);
                geoSec.appendChild(createCellElem('NoFill', noFill, xmlDoc));
                geoSec.appendChild(createCellElem('NoLine', hasLine, xmlDoc));
                geoSec.appendChild(createCellElem('NoShow', '0', xmlDoc));
                geoSec.appendChild(createCellElem('NoSnap', '0', xmlDoc));
                geoSec.appendChild(createCellElem('NoQuickDrag', '0', xmlDoc));
                geoRows.forEach(function(el) {
                    geoSec.appendChild(createRow(el, xmlDoc));
                });
                shape.appendChild(geoSec);
            }
            if (cell.scratch && cell.scratch.length > 0) {
                var scrSec = createElt(xmlDoc, XMLNS, 'Section');
                var scrRows = getAttribute(cell.scratch[0], 'name', 'Row') || [];
                scrSec.setAttribute('N', 'Connection');
                scrRows.forEach(function(el) {
                    scrSec.appendChild(createRow(el, xmlDoc));
                });
                shape.appendChild(scrSec);
            }
            if (geo.fill && geo.fill.stops && geo.fill.stops.length > 0) {
                shape.appendChild(createCellElemScaled('FillGradientDir', '0', xmlDoc));
                shape.appendChild(createCellElemScaled('FillGradientAngle', '180', xmlDoc, '', 'DEG'));
                shape.appendChild(createCellElem('FillGradientEnabled', '1', xmlDoc));
                shape.appendChild(createCellElemScaled('UseGroupGradient', '0', xmlDoc));
                var gradSec = createElt(xmlDoc, XMLNS, 'Section');
                gradSec.setAttribute('N', 'FillGradient');
                geo.fill.stops.forEach(function(stop, index) {
                    var row = createElt(xmlDoc, XMLNS, 'Row');
                    var offset = +(stop.offset.match(/\d+/)[0]) / 100;
                    var color = stop.color;
                    row.setAttribute('IX', index);
                    row.appendChild(createCellElem('GradientStopColor', color, xmlDoc));
                    row.appendChild(createCellElem('GradientStopColorTrans', '0', xmlDoc));
                    row.appendChild(createCellElem('GradientStopPosition', offset, xmlDoc));
                    gradSec.appendChild(row);
                });
                shape.appendChild(gradSec);
            }
            if (cell.attributes.attrs.label) {
                var textSec = createElt(xmlDoc, XMLNS, 'Text');
                var charSec = createElt(xmlDoc, XMLNS, 'Section');
                charSec.setAttribute('N', 'Character');
                var charRow = createElt(xmlDoc, XMLNS, 'Row');
                charRow.setAttribute('IX', '0');
                charRow.appendChild(createCellElem('Color', cell.attributes.attrs.label.fill, xmlDoc, 'Inh'));
                charRow.appendChild(createCellElem('Size', cell.attributes.attrs.label.fontSize / 100, xmlDoc, 'Inh', 'PT'));
                var text = document.createTextNode(cell.attributes.attrs.label.text || '');
                textSec.appendChild(text);
                charSec.appendChild(charRow);
                shape.appendChild(textSec);
                shape.appendChild(charSec);
            }
        }
        return shape;
    }

    function createRow(el, xmlDoc) {
        var attrs = el.attributes;
        var row = createElt(xmlDoc, XMLNS, 'Row');
        if (attrs.T) {
            row.setAttribute('T', attrs.T);
        }
        if (attrs.IX) {
            row.setAttribute('IX', attrs.IX);
        }
        if (attrs.Del) {
            row.setAttribute('Del', attrs.Del);
        }
        if (el.elements) {
            el.elements.forEach(function(cell) {
                row.appendChild(createCellElem(cell.attributes.N, cell.attributes.V, xmlDoc, cell.attributes.F));
            });
        }
        return row;
    }

    /* Connectors */
    function createLink(vsdxId, geo, xmlDoc, parentHeight, isChild, cell) {
        var sourceAttrs = geo.attrs.source.getBBox();
        var targetAttrs = geo.attrs.target.getBBox();
        var vertices = cell.attributes.vertices || [];
        var shape = createElt(xmlDoc, XMLNS, 'Shape');
        shape.setAttribute('ID', vsdxId);
        shape.setAttribute('NameU', 'Dynamic connector.' + vsdxId);
        shape.setAttribute('Name', 'Dynamic connector.' + vsdxId);
        shape.setAttribute('Type', 'Shape');
        shape.setAttribute('Master', '4'); //Dynamic Connector Master

        // getting source attributes
        var wS = sourceAttrs.width / 2, hS = sourceAttrs.height / 2;
        var pinXS = sourceAttrs.x;
        var pinYS = parentHeight - sourceAttrs.y - hS;
        var dxS = cell.attributes.source.anchor ? cell.attributes.source.anchor.args.dx : 0;
        var dyS = cell.attributes.source.anchor ? cell.attributes.source.anchor.args.dy : 0;
        var minWS = Math.min(wS, dxS);

        // var minHS = Math.min(hS, dyS);
        var beginX = (minWS === 0) ? (pinXS + wS) / 100 : (pinXS + minWS) / 100;
        // var beginY = (parentHeight - sourceAttrs.y - hS) / 100;
        var beginY = (pinYS - dyS) / 100;

        // getting target attributes
        var wT = targetAttrs.width / 2, hT = targetAttrs.height / 2;
        var pinXT = targetAttrs.x;
        var pinYT = parentHeight - targetAttrs.y - hT;
        var dxT = cell.attributes.target.anchor ? cell.attributes.target.anchor.args.dx : 0;
        var dyT = cell.attributes.target.anchor ? cell.attributes.target.anchor.args.dy : 0;
        var minWT = Math.min(wT, dxT);
        var minHT = Math.min(hT, dyT);
        var endX = (minWT === 0) ? (pinXT - wT) / 100 : (pinXT + minWT) / 100;
        // var endY = (parentHeight - targetAttrs.y - hT) / 100;
        var endY = (pinYT - minHT) / 100;
        var pinX = (beginX + endX) / 2;
        var pinY = (beginY + endY) / 2;
        var width = endX - beginX;
        var height = (endY === beginY) ? '0.25' : endY - beginY;
        if ((sourceAttrs.height > targetAttrs.height) && (endY === beginY)) {
            height = '-0.25';
        }
        var locPinY =  height * 0.5;

        //Formula is used to make the edge dynamic (specify source id and target id)
        shape.appendChild(createCellElem('BegTrigger', '2', xmlDoc, geo.attrs.source? '_XFTRIGGER(Sheet.'+ geo.source +'!EventXFMod)' : null));
        shape.appendChild(createCellElem('EndTrigger', '2', xmlDoc, geo.attrs.source? '_XFTRIGGER(Sheet.'+ geo.target +'!EventXFMod)' : null));
        shape.appendChild(createCellElem('ConFixedCode', '6', xmlDoc));
        shape.appendChild(createCellElem('LayerMember', '0', xmlDoc));
        shape.appendChild(createCellElem('Width', width, xmlDoc, 'GUARD(EndX-BeginX)'));
        shape.appendChild(createCellElem('Height', height, xmlDoc, 'Inh'));
        shape.appendChild(createCellElem('LocPinX', width * 0.5, xmlDoc, 'GUARD(Width*0.5)'));
        shape.appendChild(createCellElem('LocPinY', locPinY, xmlDoc, 'GUARD(Height*0.5)'));
        shape.appendChild(createCellElem('PinX', pinX, xmlDoc, 'GUARD((BeginX+EndX)/2)'));
        shape.appendChild(createCellElem('PinY', pinY, xmlDoc, 'GUARD((BeginY+EndY)/2)'));
        shape.appendChild(createCellElem('BeginX', beginX, xmlDoc, '_WALKGLUE(BegTrigger,EndTrigger,WalkPreference)'));
        shape.appendChild(createCellElem('BeginY', beginY, xmlDoc, '_WALKGLUE(BegTrigger,EndTrigger,WalkPreference)'));
        shape.appendChild(createCellElem('EndX', endX, xmlDoc, '_WALKGLUE(BegTrigger,EndTrigger,WalkPreference)'));
        shape.appendChild(createCellElem('EndY', endY, xmlDoc, '_WALKGLUE(BegTrigger,EndTrigger,WalkPreference)'));
        var startArrow = !cell.attributes.attrs.line.sourceMarker ? 0 : 5;
        var endArrow = !cell.attributes.attrs.line.targetMarker ? 0 : 5;
        shape.appendChild(createCellElem('EndArrow', endArrow, xmlDoc));
        shape.appendChild(createCellElem('EndArrowSize', '2', xmlDoc));
        shape.appendChild(createCellElem('BeginArrow', startArrow, xmlDoc));
        shape.appendChild(createCellElem('BeginArrowSize', '2', xmlDoc));
        shape.appendChild(createCellElem('TxtPinY', locPinY, xmlDoc));
        shape.appendChild(createCellElem('TxtPinX', Math.abs(width) * 0.5, xmlDoc));
        shape.appendChild(createCellElem('TxtLocPinY', locPinY, xmlDoc));
        shape.appendChild(createCellElem('TxtLocPinX', Math.abs(width) * 0.5, xmlDoc));
        // shape.appendChild(createCellElem('TxtWidth', Math.abs(width), xmlDoc));
        if (cell.attributes.connector && cell.attributes.connector.args.radius) {
            shape.appendChild(createCellElem('Rounding', cell.attributes.connector.args.radius / 100, xmlDoc, 'Inh', 'IN'));
        }
        var strokeColor = (geo.stroke === 'white') ? '#ffffff' : geo.stroke;
        shape.appendChild(createCellElem('TxtHeight', height, xmlDoc));
        shape.appendChild(createCellElem('LineWeight', geo.strokeWidth / 100, xmlDoc, 'Inh', 'PT'));
        shape.appendChild(createCellElem('LineColor', strokeColor, xmlDoc, 'Inh', 'THEMEGUARD(THEMEVAL("Light"))'));
        shape.appendChild(createCellElem('FillBkgnd', strokeColor, xmlDoc, 'Inh', 'THEMEGUARD(SHADE(FillForegnd,LUMDIFF(THEMEVAL("FillColor"),THEMEVAL("FillColor2"))))'));
        shape.appendChild(createCellElem('FillForegnd', strokeColor, xmlDoc, 'Inh', 'THEMEGUARD(RGB(255,255,255))'));
        var geoConnSec = createElt(xmlDoc, XMLNS, 'Section');
        geoConnSec.setAttribute('N', 'Geometry');
        geoConnSec.setAttribute('IX', 0);
        var rows = [];
        if (vertices.length > 0) {
            geoConnSec.appendChild(createCellElem('NoFill', '1', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoLine', '0', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoShow', '0', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoSnap', '0', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoQuickDrag', '0', xmlDoc));
            if (endY === beginY) {
                var rowFirst = {
                    type: 'element', name: 'Row', attributes: { T: 'MoveTo', IX: 1 },
                    elements:
                        [
                            { type: 'element', name: 'Cell', attributes: { N: 'Y', V: locPinY }}
                        ]
                };
                geoConnSec.appendChild(createRow(rowFirst, xmlDoc));
                rows.push(rowFirst);
            }
            vertices.forEach(function(ver, index) {
                var row = {
                    type: 'element', name: 'Row', attributes: { T: 'LineTo', IX: index + 2 },
                    elements:
                        [
                            { type: 'element', name: 'Cell', attributes: { N: 'X', V: (ver.x - ((beginX * 100) + Math.max(wS, dxS))) / 100 }},
                            { type: 'element', name: 'Cell', attributes: { N: 'Y', V: ((sourceAttrs.y + hS + dyS) - ver.y) / 100 }}
                        ]
                };
                geoConnSec.appendChild(createRow(row, xmlDoc));
                rows.push(row);
            });
            var rowLastY = (endY === beginY) ? locPinY : height;
            var rowLast = {
                type: 'element', name: 'Row', attributes: { T: 'LineTo', IX: vertices.length + 2 },
                elements:
                    [
                        { type: 'element', name: 'Cell', attributes: { N: 'X', V: width }},
                        { type: 'element', name: 'Cell', attributes: { N: 'Y', V: rowLastY }}
                    ]
            };
            geoConnSec.appendChild(createRow(rowLast, xmlDoc));
            rows.push(rowLast);
        } else {
            geoConnSec.appendChild(createCellElem('NoFill', '1', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoLine', '0', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoShow', '0', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoSnap', '0', xmlDoc));
            geoConnSec.appendChild(createCellElem('NoQuickDrag', '0', xmlDoc));
            rows = [
                {
                    type: 'element', name: 'Row', attributes: { T: 'MoveTo', IX: '1' },
                    elements: [{ type: 'element', name: 'Cell', attributes: { N: 'Y', V: locPinY }} ]
                },
                {
                    type: 'element', name: 'Row', attributes: { T: 'LineTo', IX: '2' },
                    elements:
                        [
                            { type: 'element', name: 'Cell', attributes: { N: 'X', V: width }},
                            { type: 'element', name: 'Cell', attributes: { N: 'Y', V: locPinY }}
                        ]
                },
                {
                    type: 'element', name: 'Row', attributes: { T: 'LineTo', IX: '3', Del: '1' }
                }
            ];
            rows.forEach(function(el) {
                geoConnSec.appendChild(createRow(el, xmlDoc));
            });
        }
        shape.appendChild(geoConnSec);
        if (cell.attributes.labels) {
            var label = cell.attributes.labels[0].attrs.text.text;
            var textSec = createElt(xmlDoc, XMLNS, 'Text');
            var controlSec = createElt(xmlDoc, XMLNS, 'Section');
            controlSec.setAttribute('N', 'Control');
            var controlRow = createElt(xmlDoc, XMLNS, 'Row');
            controlRow.setAttribute('N', 'TextPosition');
            controlRow.appendChild(createCellElem('X', (endX - beginX) * 0.5, xmlDoc));
            controlRow.appendChild(createCellElem('Y', (endY - beginY) * 0.5, xmlDoc));
            controlRow.appendChild(createCellElem('XDyn', (endX - beginX) * 0.5, xmlDoc, 'Inh'));
            controlRow.appendChild(createCellElem('YDyn', (endY - beginY) * 0.5, xmlDoc, 'Inh'));
            controlRow.appendChild(createCellElem('XCon', '0', xmlDoc, 'Inh'));
            var text = document.createTextNode(label);
            var charSec = createElt(xmlDoc, XMLNS, 'Section');
            charSec.setAttribute('N', 'Character');
            var charRow = createElt(xmlDoc, XMLNS, 'Row');
            charRow.setAttribute('IX', '0');
            charRow.appendChild(createCellElem('Size', '0.14', xmlDoc, '', 'PT'));
            textSec.appendChild(text);
            controlSec.appendChild(controlRow);
            charSec.appendChild(charRow);
            shape.appendChild(textSec);
            shape.appendChild(controlSec);
            shape.appendChild(charSec);
        }
        return shape;
    }

};